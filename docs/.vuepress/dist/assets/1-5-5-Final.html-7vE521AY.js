import{_ as p,r as o,o as c,c as l,a as n,b as s,d as e,e as a}from"./app-IugRom_o.js";const i={},u=a(`<h2 id="前言" tabindex="-1">前言</h2><p>这是 MapStruct 的参考文档，MapStruct 是一个基于注解处理器（annotation processor）的类转换器，它具有类型安全、高性能、没有其他依赖实现对象转换的特点。</p><h2 id="_1-介绍" tabindex="-1">1 介绍</h2><p>MapStruct 是一个 Java 注解处理器，用于生成类型安全的 bean 映射类。</p><p>你所要做的就是定义一个 <code>mapper</code> 接口，在接口中声明所需要的映射方法。在编译期间，MapStruct 将生成这个接口的实现类。这个实现类基于纯 Java 方法，来执行源对象和目标对象的映射。</p><p>和手写映射代码相比，这种冗长且容易出错的代码，MapStruct 会自动生成，从而节省了时间。根据约定优于配置的原则，MapStruct 会使用合理的默认值，来生成这些转换代码，同时，还允许按照自己的方式，来配置或者实现特殊的行为。</p><p>与动态映射框架相比，MapStruct 具有以下优点：</p><ul><li>通过普通方法调用，代替反射，执行速度更快；</li><li>编译时类型安全：只能映射相互映射的对象和属性，不会出现将一个 <code>OrderEntity</code> 映射到 <code>CustomerDTO</code> 这种意外情况。</li><li>当出现下面情况下，在构建的时候，会有清楚的错误报告： <ul><li>映射不完整（并非所有目标属性都被映射）</li><li>映射不正确（找不到适当的映射方法或者类型转换）</li></ul></li></ul><h2 id="_2-安装" tabindex="-1">2 安装</h2><p>MapStruct 是一个基于 JSR 269 的 Java 注释处理器，因此可以在命令行构建（javac、Ant、Maven 等）中使用，也可以在 IDE 中使用。</p><p>它包含以下组件：</p><ul><li><code>org.mapstruct:mapstruct</code>：包含所需要的注解，例如 <code>@Mapper</code></li><li><code>org.mapstruct:mapstruct-processor</code>：包含生成 mapper 实现类的注解处理器</li></ul><h3 id="_2-1-apache-maven" tabindex="-1">2.1 Apache Maven</h3><p>对于基于 Maven 的项目，在 pom 文件中添加以下内容：</p><details class="custom-container details"><summary class="custom-container-title">例1：Maven</summary><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>org.mapstruct.version</span><span class="token punctuation">&gt;</span></span>1.5.5.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>org.mapstruct.version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${org.mapstruct.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.8.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotationProcessorPaths</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapstruct-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${org.mapstruct.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotationProcessorPaths</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="_2-2-gradle" tabindex="-1">2.2 Gradle</h3><p>在 Gradle 构建文件中添加如下：</p><details class="custom-container details"><summary class="custom-container-title">例2：Gradle</summary><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token punctuation">...</span>
plugins <span class="token punctuation">{</span>
    <span class="token punctuation">...</span>
    id <span class="token interpolation-string"><span class="token string">&quot;com.diffplug.eclipse.apt&quot;</span></span> version <span class="token interpolation-string"><span class="token string">&quot;3.26.0&quot;</span></span> <span class="token comment">// Only for Eclipse</span>
<span class="token punctuation">}</span>

dependencies <span class="token punctuation">{</span>
    <span class="token punctuation">...</span>
    implementation <span class="token interpolation-string"><span class="token string">&quot;org.mapstruct:mapstruct:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">mapstructVersion</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
    annotationProcessor <span class="token interpolation-string"><span class="token string">&quot;org.mapstruct:mapstruct-processor:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">mapstructVersion</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>

    <span class="token comment">// If you are using mapstruct in test code</span>
    testAnnotationProcessor <span class="token interpolation-string"><span class="token string">&quot;org.mapstruct:mapstruct-processor:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">mapstructVersion</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span>
<span class="token punctuation">}</span>
<span class="token punctuation">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,18),r={href:"https://github.com/mapstruct/mapstruct-examples/tree/main/mapstruct-on-gradle",target:"_blank",rel:"noopener noreferrer"},d=a(`<h3 id="_2-3-apache-ant" tabindex="-1">2.3 Apache Ant</h3><p>在 <code>build.xml</code> 文件中，添加如下 <code>javac</code> 任务配置：</p><p>其中的路径需要按照你项目的结构来调整。</p><details class="custom-container details"><summary class="custom-container-title">例3：Ant</summary><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javac</span>
    <span class="token attr-name">srcdir</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>src/main/java<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">destdir</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>target/classes<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">classpath</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>path/to/mapstruct-1.5.5.Final.jar<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compilerarg</span> <span class="token attr-name">line</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>-processorpath path/to/mapstruct-processor-1.5.3.Final.jar<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compilerarg</span> <span class="token attr-name">line</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>-s target/generated-sources<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javac</span><span class="token punctuation">&gt;</span></span>
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,4),k={href:"https://github.com/mapstruct/mapstruct-examples/tree/main/mapstruct-on-gradle",target:"_blank",rel:"noopener noreferrer"},m=a(`<h3 id="_2-4-配置选项" tabindex="-1">2.4 配置选项</h3><p>MapStruct 代码生成器可以使用注解处理器选项（annotation processor options）进行配置。</p><p>当直接调用 <code>javac</code> 时，可以以 <code>-Akey=value</code> 的形式，传递给编译器。</p><p>当通过 Maven 使用 MapStruct 时，任何选项都可以通过在 Maven 处理器插件中，使用 <code>compilerArgs</code> 属性来配置传递。如下图所示：</p><details class="custom-container details"><summary class="custom-container-title">例4：Maven</summary><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>...
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotationProcessorPaths</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mapstruct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mapstruct-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${org.mapstruct.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotationProcessorPaths</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- due to problem in maven-compiler-plugin, for verbose mode add showWarnings --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>showWarnings</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>showWarnings</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>compilerArgs</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span><span class="token punctuation">&gt;</span></span>
                -Amapstruct.suppressGeneratorTimestamp=true
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arg</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span><span class="token punctuation">&gt;</span></span>
                -Amapstruct.suppressGeneratorVersionInfoComment=true
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arg</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span><span class="token punctuation">&gt;</span></span>
                -Amapstruct.verbose=true
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>arg</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>compilerArgs</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary class="custom-container-title">例5：Gradle</summary><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token punctuation">...</span>
compileJava <span class="token punctuation">{</span>
    options<span class="token punctuation">.</span>compilerArgs <span class="token operator">+=</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;-Amapstruct.suppressGeneratorTimestamp=true&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;-Amapstruct.suppressGeneratorVersionInfoComment=true&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;-Amapstruct.verbose=true&#39;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token punctuation">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary class="custom-container-title">支持配置的属性</summary><table><thead><tr><th>配置项</th><th>用途</th><th>默认值</th></tr></thead><tbody><tr><td>mapstruct. suppressGeneratorTimestamp</td><td>如果设置为 <code>true</code>，则禁止在生成的 Mapper 实现类上面的 <code>@Generated</code> 注解中添加时间戳</td><td>false</td></tr><tr><td>mapstruct.verbose</td><td>如果设置为 <code>true</code>，MapStruct 会打印其重要决策信息。需要注意的是，在使用 Maven是，还需要添加 <code>showWarnings</code> 这个属性，这是由于 maven-compiler-plugin 配置中的一个问题</td><td>false</td></tr><tr><td>mapstruct.suppressGeneratorVersionInfoComment</td><td>如果设置为 <code>true</code> 的话，则禁止在生成的 Mapper 实现类上的 <code>@Generated</code> 注解中添加 <code>comment</code> 属性。该属性包含有关 <code>MapStruct</code> 版本和用于注释处理器的编译器信息</td><td>false</td></tr><tr><td>mapstruct.defaultComponentModel</td><td>生成的 Mapper 实现类时的组件模型（Component Model）名称（请参见<a href="#%E6%A3%80%E7%B4%A2%E6%98%A0%E5%B0%84%E5%99%A8">检索映射器</a>)章节。<br><br>支持属性如下：<br> - <code>default</code>：Mapper 不使用组件模型，通常通过 <code>Mappers#getMapper(Class)</code> 来检索实例<br> - <code>cdi</code>：生成的转换器是一个 CDI 应用 bean，可以通过 <code>@Inject</code> 检索。 - <code>spring</code>：生成的映射器是一个 Spring 的单例 bean，可以通过 <code>@Autowired</code> 来检索。- <code>jsr330</code>： 生成的映射器被 <code>@Named</code> 注解，可以通过 <code>@Inject</code>（javax.inject 或 jakarta.inject 包下，javax.inject 优先级更高） 来检索<br> - <code>jakarta</code>：生成的映射器被 <code>@Named</code> 注解。<br><br>还可以通过 <code>@Mapper#componentModel()</code> 来配置具体的转换器，且优先级更高</td><td>default</td></tr><tr><td>mapstruct.defaultInjectionStrategy</td><td>通过 <code>uses</code> 属性使用的转换器，注入的方式。仅用于基于注解的组件模型，如 CDI、Spring、JSR 330。 <br><br> 支持配置的值如下：<br> -<code>field</code>：通过属性的方式注入依赖 <br> -<code>constructor</code>：将为实现类生成构造器，且通过构造器的方式注入依赖 <br><br> 当组件模型是 CDI 时，会生成一个默认的构造器。<br> 该策略还可以通过 <code>@Mapper#injectionStrategy()</code> 来配置指定的 Mapper 接口，且优先级更高。</td><td>field</td></tr><tr><td>mapstruct.unmappedTargetPolicy</td><td>当目标属性没有基于来源值的填充方法（例如：setXxx）时，MapStruct 的默认报告策略。<br><br>支持如下值：-<code>Error</code>：任何未映射的目标属性都将导致映射代码生成失败 <br> -<code>WARN</code>：在编译阶段任何未映射的目标属性都会造成一个异常 -<code>IGNORE</code>：忽略未映射的目标属性 <br><br> 该策略还可以通过 <code>@Mapper#unmappedTargetPolicy()</code> 为具体的映射器指定，且优先级更高。除此之外，还可以通过 <code>@BeanMapping#unmappedTargetPolicy()</code> 未特定的 bean 映射指定策略，该配置优先级最高。</td><td>WARN</td></tr><tr><td>mapstruct.unmappedSourcePolicy</td><td>当来源属性没有可以给目标属性填充值的方法时，MapStruct 的默认报告策略。<br><br>支持如下值：-<code>Error</code>：任何未映射的来源属性都将导致映射代码生成失败 <br> -<code>WARN</code>：在编译阶段任何未映射的来源属性都会造成一个异常 -<code>IGNORE</code>：忽略未映射的来源属性 <br><br> 该策略还可以通过 <code>@Mapper#unmappedSourcePolicy()</code> 为具体的映射器指定，且优先级更高。除此之外，还可以通过 <code>@BeanMapping#unmappedSourcePolicy()</code> 未特定的 bean 映射指定策略，该配置优先级最高。</td><td>WARN</td></tr><tr><td>mapstruct. disableBuilders</td><td>如果设置为 true，那么在进行映射时 MapStruct 将不会使用构造器模式。这相当于为所有映射器添加了 <code>@Mapper(build = @Builder(disableBuilder = true))</code> 配置</td><td>false</td></tr></tbody></table></details><h3 id="_2-5-将-mapstruct-与-java-模块系统一起使用" tabindex="-1">2.5 将 MapStruct 与 Java 模块系统一起使用</h3><blockquote><p>模块系统（Module System）：Java 9 的新特性</p></blockquote><p>MapStruct 可以与 Java 9 及更高版本一起使用。</p><blockquote><p>原文：To allow usage of the @Generated annotation java.annotation.processing.Generated (part of the java.compiler module) can be enabled.</p></blockquote><p>这一段不知道该如何翻译。但可以说一下大概想法。</p><p><code>@Generated</code> JDK 11 之后被默认去除了，MapStruct 会根据运行环境，当 Java 11 及以后，会自动添加 <code>javax.annotation-api</code> 依赖包，从而使用该注解。</p><h3 id="_2-6-ide-整合" tabindex="-1">2.6 IDE 整合</h3><h4 id="intellij" tabindex="-1">Intellij</h4>`,15),v={href:"https://plugins.jetbrains.com/plugin/10036-mapstruct-support",target:"_blank",rel:"noopener noreferrer"},g=a(`<p>该插件包含以下的特性：</p><ul><li><code>target</code>、<code>source</code>、<code>expression</code> 自动提示</li><li>支持 <code>target</code>、<code>source</code> 直接跳转属性定义的地方</li><li>查找 <code>target</code>、<code>source</code> 属性的用法</li><li>支持重构</li><li>异常和快速修复</li></ul><h4 id="eclipse" tabindex="-1">Eclipse</h4><p>Eclipse 同样提供了 [MapStruct Eclipse Plugin] 插件，以方便 MapStruct 的使用。</p><p>包含以下特定：</p><ul><li><code>target</code> 和 <code>source</code> 代码提示</li><li>快速修复</li></ul><h2 id="_3-定义一个-mapper" tabindex="-1">3 定义一个 mapper</h2><p>在本节，您将学习如何使用 MapStruct 定义 bean 映射器（mapper），以及可以配置哪些选项。</p><h3 id="_3-1-基本映射-basic-mappings" tabindex="-1">3.1 基本映射（Basic Mappings）</h3><p>要创建一个映射器，只需要定义一个接口、需要的映射方法，及在该接口上面添加 <code>org.mapstruct.Mapper</code> 注解。</p><details class="custom-container details"><summary class="custom-container-title">例6：通过</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CarMapper</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;manufacturer&quot;</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">&quot;make&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;seatCount&quot;</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">&quot;numberOfSeats&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">CarDto</span> <span class="token function">carToCarDto</span><span class="token punctuation">(</span><span class="token class-name">Car</span> car<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;fullName&quot;</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">PersonDto</span> <span class="token function">personToPersonDto</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>在编译时，<code>@Mapper</code> 注解会使 MapStruct 的代码生成器，创建这个接口（<code>CarMapper</code>）的实现类。</p><p>在生成的方法实现中，源类型（<code>Car</code>）的所有可读属性都将复制到目标类型（<code>CarDto</code>）的相应属性中：</p><ul><li>当源类型与目标类型有相同名称的属性时，将被隐式映射；</li><li>当属性在目标实体中是不同的名称时，可以通过 <code>@Mapping</code> 注解指定其名称。</li></ul><blockquote><p>JavaBeans 规范中定义的属性名称，必须在 <code>@Mapping</code> 注解中指定，例如属性 seatCount 和其访问方法 <code>getSeatCount()</code>、<code>setSeatCount()</code></p><p>当指定 <code>@BeanMapping(ignoreByDefault = true)</code> 时，则不会隐式的进行属性转换，这意味着必须通过 <code>@Mapping</code> 指定所有映射关系，并且不会在缺少目标属性时发出任何警告。这允许忽略所有的除了 <code>@Mapping</code> 注解之外的字段。</p><p>流式(fluent) setters 也是支持的。所谓流式 setters 是指 setters 方法返回当前实例。</p><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">seatCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> seatCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>seatCount <span class="token operator">=</span> seatCount<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>为了更好的理解 MapStruct 的功能，来看一下 MapStruct 生成的 <code>carToCarDto()</code> 实现方法：</p><details class="custom-container details"><summary class="custom-container-title">例7：通过</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// GENERATED CODE</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">CarMapper</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">CarDto</span> <span class="token function">carToCarDto</span><span class="token punctuation">(</span><span class="token class-name">Car</span> car<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> car <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">CarDto</span> carDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CarDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span> car<span class="token punctuation">.</span><span class="token function">getFeatures</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            carDto<span class="token punctuation">.</span><span class="token function">setFeatures</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span> car<span class="token punctuation">.</span><span class="token function">getFeatures</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        carDto<span class="token punctuation">.</span><span class="token function">setManufacturer</span><span class="token punctuation">(</span> car<span class="token punctuation">.</span><span class="token function">getMake</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        carDto<span class="token punctuation">.</span><span class="token function">setSeatCount</span><span class="token punctuation">(</span> car<span class="token punctuation">.</span><span class="token function">getNumberOfSeats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        carDto<span class="token punctuation">.</span><span class="token function">setDriver</span><span class="token punctuation">(</span> <span class="token function">personToPersonDto</span><span class="token punctuation">(</span> car<span class="token punctuation">.</span><span class="token function">getDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        carDto<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span> car<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> car<span class="token punctuation">.</span><span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            carDto<span class="token punctuation">.</span><span class="token function">setCategory</span><span class="token punctuation">(</span> car<span class="token punctuation">.</span><span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        carDto<span class="token punctuation">.</span><span class="token function">setEngine</span><span class="token punctuation">(</span> <span class="token function">engineToEngineDto</span><span class="token punctuation">(</span> car<span class="token punctuation">.</span><span class="token function">getEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> carDto<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">PersonDto</span> <span class="token function">personToPersonDto</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//...</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">EngineDto</span> <span class="token function">engineToEngineDto</span><span class="token punctuation">(</span><span class="token class-name">Engine</span> engine<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> engine <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">EngineDto</span> engineDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EngineDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        engineDto<span class="token punctuation">.</span><span class="token function">setHorsePower</span><span class="token punctuation">(</span>engine<span class="token punctuation">.</span><span class="token function">getHorsePower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        engineDto<span class="token punctuation">.</span><span class="token function">setFuel</span><span class="token punctuation">(</span>engine<span class="token punctuation">.</span><span class="token function">getFuel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> engineDto<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>MapStruct 的基本理念就是让生成的代码，尽可能地看起来像是您亲手编写的代码。典型的是从源对象复制值到目标类型，通过普通的 <code>getter</code>/<code>setter</code> 调用，而不是通过反射或者其他类似的方式。</p><p>如示例所示，生成的代码考虑了通过 <code>@Mapping</code> 指定的任何名称直接的映射。如果需要映射的属性在源实体和目标实体中类型是不同的，MapStruct 要么应用一个自动转换（例如，对于 <code>price</code> 属性的转换，请参考<a href="#%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">隐式类型转换</a>)，或者，调用/生成另一个映射方法（例如 <code>driver</code>/<code>engine</code> 属性的转换，请参考<a href="#%E8%BD%AC%E6%8D%A2%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8">转换对象引用</a>)。 只有当源属性和目标属性是 Bean 的属性，并且它们本身是 Bean 或简单属性时，MapStruct 才会创建一个新的映射方法。比如，他们不是 <code>Collection</code> 或 <code>Map</code> 类型的属性。</p><p>对于元素类型相同的 <code>Collection</code> 集合，在执行映射时，会创建一个新的集合，并拷贝源对象的集合数据。对于元素类型不同的 <code>Collection</code> 集合，每个元素会单独映射，再添加到目标集合中。（详情可以参考<a href="#%E9%9B%86%E5%90%88%E6%98%A0%E5%B0%84">集合映射</a>)</p><p>MapStruct 会对源类型和目标类型中所有公开（public）属性进行映射，包括定义在父类中的属性。</p><h3 id="_3-2-mapping-组合-实验性" tabindex="-1">3.2 Mapping 组合（实验性）</h3><p>MapStruct 支持使用元注解。<code>@Mapping</code> 注解除了支持配置在方法上面，还可以配置在注解上面。这允许通过其他（用户定义）的注解来重复利用 <code>@Mapping</code> 注解。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">CLASS</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> ignore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;creationDate&quot;</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">&quot;java(new java.util.Date())&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">&quot;groupName&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ToEntity</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这可以在不需要具有公共基本类型的基础上描述实体。例如下面的示例中，<code>ShelveEntity</code> 和 <code>BoxEntity</code> 在 <code>StorageMapper</code> 中不共享公共基本类型。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StorageMapper</span> <span class="token punctuation">{</span>

    <span class="token class-name">StorageMapper</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token class-name">Mappers</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span> <span class="token class-name">StorageMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ToEntity</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span> target <span class="token operator">=</span> <span class="token string">&quot;weightLimit&quot;</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">&quot;maxWeight&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">ShelveEntity</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">ShelveDto</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ToEntity</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span> target <span class="token operator">=</span> <span class="token string">&quot;label&quot;</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">&quot;designation&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">BoxEntity</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">BoxDto</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，他们必须要有一些共同的属性。<code>@ToEntity</code> 注解假设所有的目标类型（<code>ShelveEntity</code> 和 <code>BoxEntity</code>）都包含属性：&quot;<code>id</code>&quot;、&quot;<code>createDate</code>&quot;、&quot;<code>name</code>&quot;。此外，还假设所有的来源类型（<code>ShelveDto</code>、<code>BoxDto</code>）都有属性 &quot;<code>groupName</code>&quot;。 这个概念也被称为“鸭子类型“，换而言之，如果它像鸭子一样嘎嘎叫，像鸭子一样走路，那么它可能就是一只鸭子。</p><p>这个功能还属于实验特性。当出现异常情况时，描述信息并不完善：会直接显示出现问题的方法，以及 <code>@Mapping</code> 中的相关值。 然而，不能直接显示这个组合的影响方面。这些信息“好像”是 <code>@Mapping</code> 直接出现在相关方法上。因此，用户应该谨慎地使用这个特性，特别是不确定一个属性是否一直存在。</p><p>一种类型更安全（但也会更加啰嗦）的方式是定义一个基本类或者接口，目标类和源类继承该类，并且使用 <code>@InheritConfiguration</code> 注解，实现相同的结果（请参考[Mapping 配置继承](#Mapping 配置继承)）。</p><h3 id="_3-3-在转换类中添加自定义方法" tabindex="-1">3.3 在转换类中添加自定义方法</h3><p>在某些情况下，可能需要手动实现从一种类型映射为另一种类型的特性实现，这种实现是 MapStruct 无法生成的。处理这个问题的一种方式是在另一个类上实现自定义方法，然后由 MapStruct 生成的映射器来使用这个方法（请参考<a href="#%E6%89%A7%E8%A1%8C%E5%85%B6%E4%BB%96%E6%98%A0%E5%B0%84%E5%99%A8">执行其他映射器</a>）</p><p>当 Java 8 或者之后的版本后，也可以选择另一种方法：可以直接在映射接口（mapper interface）中实现自定义方法。生成映射代码时，当参数和返回类型与该方法相同，则将默认调用该方法。</p><p>假如，当 <code>Person</code> 映射为 <code>PersonDto</code> 时，需要一些特殊的逻辑，而而抓拍逻辑无法由 MapStruct 来生成。基于前面的例子，通过在转换器接口中定义转换方法的方式，实现这个要求：</p><details class="custom-container details"><summary class="custom-container-title">例8：在转换接口中定义默认的自定义映射方法</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CarMapper</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token class-name">CarDto</span> <span class="token function">carToCarDto</span><span class="token punctuation">(</span><span class="token class-name">Car</span> car<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">default</span> <span class="token class-name">PersonDto</span> <span class="token function">personToPersonDto</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//hand-written mapping logic</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>MapStruct 生成的实现类中实现了 <code>carToCarDto()</code> 方法，在生成的这个方法中，当执行 <code>driver</code> 属性映射时，会执行手动实现的 <code>personToPersonDto()</code> 方法。</p><p>映射器除了接口的形式，也可以是抽象类的形式，可以直接在抽象映射器类中实现自定义方法。在这种情况下，MapStruct 会实现抽象类中的所有非抽象方法。这种方式比在接口中声明默认方法的优点是，可以在抽象类中声明其他属性。</p><p>在前面 <code>Person</code> 转换为 <code>PersonDto</code> 的特殊映射逻辑例子中，还可以像如下这样定义：</p><details class="custom-container details"><summary class="custom-container-title">例9</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CarMapper</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">CarDto</span> <span class="token function">carToCarDto</span><span class="token punctuation">(</span><span class="token class-name">Car</span> car<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">PersonDto</span> <span class="token function">personToPersonDto</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//hand-written mapping logic</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>MapStruct 将会生成 <code>CarMapper</code> 的子类，并且实现其中的抽象方法 <code>carToCarDto()</code>。在生成的 <code>carToCarDto()</code> 代码中，映射 <code>driver</code> 属性时，会执行手动实现的 <code>personToPersonDto()</code> 方法。</p><h3 id="_3-4-多来源参数的映射方法" tabindex="-1">3.4 多来源参数的映射方法</h3><p>MapStruct 支持多个来源参数的映射方法。这很有用。例如将几个实体组合到一个数据传输对象中。示例如下：</p><details class="custom-container details"><summary class="custom-container-title">多来源参数的映射方法</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AddressMapper</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;description&quot;</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">&quot;person.description&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;houseNumber&quot;</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">&quot;address.houseNo&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">DeliveryAddressDto</span> <span class="token function">personAndAddressToDeliveryAddressDto</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">,</span> <span class="token class-name">Address</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>上面显示的映射方法中，接口了两个来源参数，并返回了一个组合的目标对象。与单参数映射方法一致，根据参数名称来映射其属性。</p><p>如果在多个来源对象中，都有定义相同名称的属性，那么在映射时，必须通过 <code>@Mapping</code> 来指定这个属性的来源参数。如下面的示例中 <code>description</code> 属性的转换。 当没有解决这种歧义问题时，将会报错。对于仅存在与给定的来源对象中的一个时，可以省略指定这个属性的来源参数，因为它可以自动确定。</p>`,44),b=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("p",null,[s("在使用 "),n("code",null,"@Mapping"),s(" 注解时，必须指定参数的来源属性。")])],-1),y=n("div",{class:"custom-container info"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"INFO"),n("p",null,[s("多来源参数映射中，当所有来源参数都为 "),n("code",null,"null"),s(" 时，方法最终会返回 "),n("code",null,"null"),s("。 否则，会根据提供的源对象来生成目标对象。")])],-1),w=a(`<p>MapStruct 还支持直接使用来源参数进行转换。</p><details class="custom-container details"><summary class="custom-container-title">例11：直接引用来源参数的转换方法</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AddressMapper</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;description&quot;</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">&quot;person.description&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;houseNumber&quot;</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">&quot;hn&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">DeliveryAddressDto</span> <span class="token function">personAndAddressToDeliveryAddressDto</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">,</span> <span class="token class-name">Integer</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>在这个例子中，来源参数直接映射到目标对象。参数 <code>hn</code> 是一个非 bean 类型（在这个例子是 <code>java.lang.Integer</code>）映射到 <code>houseNumber</code> 属性。</p><h3 id="_3-5-嵌套对象属性映射到目标属性" tabindex="-1">3.5 嵌套对象属性映射到目标属性</h3><p>如果不想显式地命名来源对象中嵌套 bean 的属性，可以配置 <code>target</code> 参数为 <code>.</code>。这将告诉 MapStruct 映射转换每一个嵌套 bean 的属性到目标对象中。下面是示例：</p><details class="custom-container details"><summary class="custom-container-title">例12：使用</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Mapper</span>
 <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerMapper</span> <span class="token punctuation">{</span>

     <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span> target <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">&quot;record.name&quot;</span> <span class="token punctuation">)</span>
     <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span> target <span class="token operator">=</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">&quot;record&quot;</span> <span class="token punctuation">)</span>
     <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span> target <span class="token operator">=</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">&quot;account&quot;</span> <span class="token punctuation">)</span>
     <span class="token class-name">Customer</span> <span class="token function">customerDtoToCustomer</span><span class="token punctuation">(</span><span class="token class-name">CustomerDto</span> customerDto<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>生成的代码将会直接映射 <code>CustomerDto.record</code> 中的每一个属性到 <code>Customer</code>，而不需要命名具体的参数。<code>Customer.account</code> 也是同样的道理。</p><p>当发生命名冲突时，可以通过显式定义映射关系来解决这些冲突。例如上面的例子中，<code>name</code> 属性同时存在于 <code>CustomerDto.record</code> 和 <code>CustomerDto.account</code> 中，<code>@Mapping(target = &quot;name&quot;, source = &quot;record.name&quot;)</code> 就是为了解决这个冲突的。</p><p>当多层级对象映射到平铺对象的时候（反之亦然 <code>@InheritInverseConfiguration</code>），这个特性非常有用.</p><h3 id="_3-6-修改已经存在的对象实例" tabindex="-1">3.6 修改已经存在的对象实例</h3><p>有的时候，需要执行映射时，不返回一个新的对象，而是更新现有的对象实例。这种可以通过将已经存在的目标对象，添加到映射方法的参数中，并用 <code>@MappingTarget</code> 注解标注。 下面是一个例子：</p><details class="custom-container details"><summary class="custom-container-title">例13：更改方法</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CarMapper</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">updateCarFromDto</span><span class="token punctuation">(</span><span class="token class-name">CarDto</span> carDto<span class="token punctuation">,</span> <span class="token annotation punctuation">@MappingTarget</span> <span class="token class-name">Car</span> car<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>生成的 <code>updateCarFromDto()</code> 方法实现中，会使用给定的 <code>CarDto</code> 对象，来修改传递的 <code>Car</code> 实例。 这里可能只有一个参数标记为映射的目标对象。除了将映射方法的返回类型设置为 <code>void</code>，还可以设置返回为目标对象的类型，这种情况下，生成的实现方法中，会修改传入的映射目标对象，并将其返回。这样可以支持流式调用映射方法。</p><p>当目标属性类型是 <code>Collection</code> 或者 <code>Map</code>，当策略为 <code>CollectionMappingStrategy.ACCESSOR_ONLY</code> 时，将会先将集合清空（clear），再用源对象中的值填充。 除此之外，当策略为 <code>CollectionMappingStrategy.ADDER_PREFERRED</code> 或 <code>CollectionMappingStrategy.TARGET_IMMUTABLE</code> 时，目标属性的集合不会清空，且立即填充值。</p><h3 id="_3-7-直接访问属性的映射" tabindex="-1">3.7 直接访问属性的映射</h3><p>MapStruct 同样支持 <code>public</code> 类型的字段（没有 getters/setters ）进行映射。 当找不到这些属性的 getter/setter 方法时，会使用这些字段进行读写。</p><p>只有当一个属性为 <code>public</code> 或 <code>public final</code> 时，才可以作为读访问器。 如果字段是 <code>static</code> 类型的话，不能够作为读访问器。</p><p>只有当一个属性为 <code>public</code> 时，才能作为写访问器。 如果字段是 <code>final</code> 或者 <code>static</code> 时，不能够作为读访问器。</p><p>示例：</p><details class="custom-container details"><summary class="custom-container-title">例14：类映射示例</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token comment">//getters and setter omitted for brevity</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerDto</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> customerName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerMapper</span> <span class="token punctuation">{</span>

    <span class="token class-name">CustomerMapper</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token class-name">Mappers</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span> <span class="token class-name">CustomerMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">&quot;customerName&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">Customer</span> <span class="token function">toCustomer</span><span class="token punctuation">(</span><span class="token class-name">CustomerDto</span> customerDto<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@InheritInverseConfiguration</span>
    <span class="token class-name">CustomerDto</span> <span class="token function">fromCustomer</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>对于上面的配置，生成的映射器如下所示：</p><details class="custom-container details"><summary class="custom-container-title">例15：生成的类映射器示例</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// GENERATED CODE</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">CustomerMapper</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Customer</span> <span class="token function">toCustomer</span><span class="token punctuation">(</span><span class="token class-name">CustomerDto</span> customerDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        customer<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span> customerDto<span class="token punctuation">.</span>id <span class="token punctuation">)</span><span class="token punctuation">;</span>
        customer<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span> customerDto<span class="token punctuation">.</span>customerName <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">CustomerDto</span> <span class="token function">fromCustomer</span><span class="token punctuation">(</span><span class="token class-name">Customer</span> customer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        customerDto<span class="token punctuation">.</span>id <span class="token operator">=</span> customer<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        customerDto<span class="token punctuation">.</span>customerName <span class="token operator">=</span> customer<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,22),h={href:"https://github.com/mapstruct/mapstruct-examples/tree/master/mapstruct-field-mapping",target:"_blank",rel:"noopener noreferrer"},M=a('<h3 id="_3-8-使用构造器" tabindex="-1">3.8 使用构造器</h3><p>MapStruct 支持使用构造器来映射不可变的类型。在 MapStruct 执行映射时，会检查是否存在可以用于映射类型的构造器。 这是通过 <code>BuilderProvider</code> SPI 来实现的，如果存在的话，则会使用该构造器来映射。</p><p><code>BuilderProvider</code> 默认实现假设如下「<em>这里可以认为是只有满足如下条件时，该类才会生效</em>」：</p><ul><li>该类型有一个无参公共静态构造器创建方法，该方法返回一个构造器。例如，<code>Person</code> 有一个返回 <code>PersonBuilder</code> 的公共静态方法。</li><li>构造器类中有一个无参的公共方法（构造方法），该方法返回其内部构造的类型。例如示例中 <code>PersonBuilder</code> 有一个返回 <code>Person</code> 的方法。</li><li>当有多个构造方法时，MapStruct 将会寻找一个名为 <code>build</code> 的方法，如果存在就用该方法，否则创建一个编译异常。</li><li>特殊的构造方法，可以在 <code>@BeanMapping</code>、<code>@Mapper</code> 或 <code>@MapperConfig</code> 中提供的 <code>@Builder</code> 来指定。</li><li>当有多个满足条件的构造器创建方法存在时，<code>DefaultBuilderProvider</code> SPI 将会抛出一个 <code>MoreThanOneBuilderCreationMethodException</code> 异常。对于该异常，MapStruct 会在编译中写入「<em>记录</em>」警告，并且不适用任何生成器。</li></ul><p>如果找到了这样子的构造器，MapStruct 会使用该类来执行映射（即使找到了该类提供的 setters）。MapStruct 会调用构造器的构造方法来生成映射代码。</p>',5),f=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("p",null,[s("构造器检测的特性，可以通过 "),n("code",null,"@Builder.disableBuilder"),s(" 来关闭。当关闭后，MapStruct 将像以前一样使用常规的 getter/setter。")])],-1),C=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("p",null,[s("对于构造器类型创建，还可以使用使用对象工厂。例如，在 "),n("code",null,"PersonBuilder"),s(" 中存在一个对象工厂时，将会使用这个工厂类来代替构造器创建方法")])],-1),x=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("p",null,[s("构造器会影响 "),n("code",null,"@BeforeMapping"),s(" 和 "),n("code",null,"@AfterMapping"),s(" 行为，请参考章节 "),n("code",null,"Mapping customization with before-mapping and after-mapping methods"),n("a",{href:"#%E5%AE%9A%E5%88%B6%E5%8C%96%E8%BD%AC%E6%8D%A2-%E8%BD%AC%E6%8D%A2%E5%89%8D%E5%92%8C%E8%BD%AC%E6%8D%A2%E5%90%8E"},"定制化转换-转换前和转换后"),s(" 来了解更多信息")])],-1),D=a(`<details class="custom-container details"><summary class="custom-container-title">例16：Person</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">Person<span class="token punctuation">.</span>Builder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> builder<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Person<span class="token punctuation">.</span>Builder</span> <span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">Builder</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span> <span class="token keyword">this</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary class="custom-container-title">例17：定义</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonMapper</span> <span class="token punctuation">{</span>

    <span class="token class-name">Person</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">PersonDto</span> dto<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary class="custom-container-title">例18：基于构造器来生成转换器实现类</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// GENERATED CODE</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">PersonMapper</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">PersonDto</span> dto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dto <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">Person<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        builder<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span> dto<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>支持的构造器框架：</p>`,4),E={href:"https://github.com/projectlombok/lombok/issues/1538",target:"_blank",rel:"noopener noreferrer"},S=n("a",{href:"#Lombok"},"Lombok",-1),j=a("<blockquote><p>这里说的单独的模块，应该是 Lombok 之前的问题，现在已经解决，可以忽略。</p></blockquote><ul><li>AutoValue</li><li>Immutables：当注释处理器路径上存在 Immutables 时，默认使用 <code>ImmutablesAccessorNamingStrategy</code> 和 <code>ImmutablesBuilderProvider</code>。</li><li>FreeBuilder：当注释处理器路径上存在 FreeBuilder 时，默认使用 <code>FreeBuilderAccessorNamingStrategy</code>。当使用 FreeBuilder 时，应当遵循 JavaBean 约定，否则 MapStruct 将无法识别流利的 getters。</li><li>同样适用于自定义的构造器（手写构造器），前提构造器实现支持 <code>BuilderProvider</code> 定义的规则。否则，需要编写一个自定义的 <code>BuilderProvider</code>。</li></ul>",2),q=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("p",null,[s("如果想要禁用构造器，那么可以将 MapStruct 处理器选项 "),n("code",null,"mapstruct.disablebuilders"),s(" 传递给编译期。例如："),n("code",null,"-Amapstruct.disableBuilders=true")])],-1),A=a(`<h3 id="_3-9-使用构造函数" tabindex="-1">3.9 使用构造函数</h3><p>MapStruct 支持使用构造函数来映射目标类型。当 MapStruct 执行映射时，会检查是否存在目标类型的构造器。 如果没有构造器，MapStruct 会寻找一个可访问的构造函数。当有多个构造函数时，将按照如下规则，选择一个构造函数来使用：</p><ul><li>如果一个构造函数被 <code>@Default</code>（任意包都可以，参考<a href="#%E6%9C%AA%E5%88%97%E5%87%BA%E6%B3%A8%E9%87%8A">未列出注释</a>） 注解标注，那么会使用该构造函数。</li><li>如果只存在一个公开的构造函数，则会使用它来构造对象，其他的非公开构造函数将被忽略。</li><li>如果存在无参构造函数，那么会用它来构造对象，而其他构造函数将被忽略。</li><li>如果存在多个符合条件的构造函数，优于模棱两可的构造函数将出现编译异常。为了打破歧义，可以使用 <code>@Default</code> 注解来标注。</li></ul><details class="custom-container details"><summary class="custom-container-title">例19：决定使用哪个构造函数</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span>

    <span class="token keyword">protected</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token comment">// MapStruct will use this constructor, because it is a single public constructor</span>
    <span class="token keyword">public</span> <span class="token class-name">Vehicle</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>

    <span class="token comment">// MapStruct will use this constructor, because it is a parameterless empty constructor</span>
    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> make<span class="token punctuation">,</span> <span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Truck</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Truck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token comment">// MapStruct will use this constructor, because it is annotated with @Default</span>
    <span class="token annotation punctuation">@Default</span>
    <span class="token keyword">public</span> <span class="token class-name">Truck</span><span class="token punctuation">(</span><span class="token class-name">String</span> make<span class="token punctuation">,</span> <span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Van</span> <span class="token punctuation">{</span>

    <span class="token comment">// There will be a compilation error when using this class because MapStruct cannot pick a constructor</span>

    <span class="token keyword">public</span> <span class="token class-name">Van</span><span class="token punctuation">(</span><span class="token class-name">String</span> make<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Van</span><span class="token punctuation">(</span><span class="token class-name">String</span> make<span class="token punctuation">,</span> <span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>使用构造函数时，默认使用构造函数的参数名与目标属性匹配。 如果构造函数上有 <code>@ConstructorProperties</code>（任意来源包，请参考<a href="#%E6%9C%AA%E5%88%97%E5%87%BA%E6%B3%A8%E9%87%8A">未列出注释</a>） 名称的注解时，则会使用该注解来获取参数名称。</p>`,5),_=n("div",{class:"custom-container info"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"INFO"),n("p",null,[s("当存在 "),n("code",null,"@ObjectFactory"),s(" 注解标注的对象工厂方法时，该方法比所有的构造函数优先级更高。在这种情况下，将不会使用目标对象的构造函数。")])],-1),B=a(`<details class="custom-container details"><summary class="custom-container-title">例20：具有构造函数参数的</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> surname<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> surname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>surname <span class="token operator">=</span> surname<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary class="custom-container-title">例21：定义</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PersonMapper</span> <span class="token punctuation">{</span>

    <span class="token class-name">Person</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">PersonDto</span> dto<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary class="custom-container-title">例22：生成的转换器实现类</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// GENERATED CODE</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">PersonMapper</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">PersonDto</span> dto<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dto <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token class-name">String</span> surname<span class="token punctuation">;</span>
        name <span class="token operator">=</span> dto<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        surname <span class="token operator">=</span> dto<span class="token punctuation">.</span><span class="token function">getSurname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span> name<span class="token punctuation">,</span> surname <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> person<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="_3-10-映射-map-为-bean" tabindex="-1">3.10 映射 Map 为 Bean</h3><p>在某些情况下，需要将一个 <code>Map&lt;String, ???&gt;</code> 映射为一个指定的 Bean。 MapStruct 提供了一种方法，通过目标类的属性（或者通过 <code>Mapping#source</code> 定义），从 Map 中提取相应的值，来完成映射。例如：</p><details class="custom-container details"><summary class="custom-container-title">例23：映射</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token comment">//getters and setter omitted for brevity</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CustomerMapper</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Mapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token string">&quot;customerName&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">Customer</span> <span class="token function">toCustomer</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary class="custom-container-title">例24：映射</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// GENERATED CODE</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerMapperImpl</span> <span class="token keyword">implements</span> <span class="token class-name">CustomerMapper</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Customer</span> <span class="token function">toCustomer</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span> <span class="token string">&quot;id&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            customer<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span> <span class="token string">&quot;id&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span> <span class="token string">&quot;customerName&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            customer<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span> <span class="token string">&quot;customerName&quot;</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,7),I=n("div",{class:"custom-container info"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"INFO"),n("p",null,[s("目前支持的不同类型之间的映射，以及使用 "),n("code",null,"Mapper#uses"),s(" 中定义的其他映射器，或者在映射器中自定义的方法，同样支持 Map 转换为 Bean。 例如，也可以从一个 "),n("code",null,"Map<String, Integer>"),s(" 转换为一个 Bean 对象，这就需要每个属性都将从 "),n("code",null,"Integer"),s(" 类型转换而来。")])],-1),P=a(`<h2 id="_4-检索映射器" tabindex="-1">4 检索映射器</h2><h3 id="_4-1-映射器工厂-非依赖注入-「mappers-factory」" tabindex="-1">4.1 映射器工厂（非依赖注入）「Mappers Factory」</h3><p>当不适用依赖注入的框架时，可以通过 <code>org.mapstruct.factory.Mappers</code> 类检索映射器实例。只需要调用 <code>getMapper()</code> 方法，并传入接口类型，则会返回相应的映射器实例。</p><details class="custom-container details"><summary class="custom-container-title">例25：使用映射器工厂</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">CarMapper</span> mapper <span class="token operator">=</span> <span class="token class-name">Mappers</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span> <span class="token class-name">CarMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></details><p>按照惯例，映射器接口应该定义一个名为 <code>INSTANCE</code> 的属性，该属性保存着当前映射器类型的单个实例：</p><details class="custom-container details"><summary class="custom-container-title">例26：声明一个转换器接口的实例</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CarMapper</span> <span class="token punctuation">{</span>

    <span class="token class-name">CarMapper</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token class-name">Mappers</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span> <span class="token class-name">CarMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">CarDto</span> <span class="token function">carToCarDto</span><span class="token punctuation">(</span><span class="token class-name">Car</span> car<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><details class="custom-container details"><summary class="custom-container-title">例27：声明一个转换器抽象类的实例</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CarMapper</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">CarMapper</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token class-name">Mappers</span><span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span> <span class="token class-name">CarMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">CarDto</span> <span class="token function">carToCarDto</span><span class="token punctuation">(</span><span class="token class-name">Car</span> car<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>这种方式可以非常容易地使用映射器对象，而无需重复实例化新的实例：</p><details class="custom-container details"><summary class="custom-container-title">例28：访问映射器</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Car</span> car <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
<span class="token class-name">CarDto</span> dto <span class="token operator">=</span> <span class="token class-name">CarMapper</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">carToCarDto</span><span class="token punctuation">(</span> car <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><p>注意：由 MapStruct 生成的映射器是无状态且线程安全的，因此可以同时多线程访问。</p><h3 id="_4-2-使用依赖注入" tabindex="-1">4.2 使用依赖注入</h3><p>如果你使用的是一个依赖注入的框架，例如 CDI 或者 Spring 框架，建议通过依赖注入的方式获取映射器对象，而不是像上面描述的那样通过 <code>Mappers</code> 类来获取。 为此，可以通过 <code>@Mapper#componentModel</code> 或者定义处理器属性（参考<a href="#24-%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9">配置选项</a>）指定生成的映射器类的组件模型（component model）。</p><p>目前支持 CDI 和 Spring（后者通过自定义注解或者使用 JSR 330 注解）。 请参阅<a href="#24-%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9">配置选项</a>中 <code>componentModel</code> 属性允许的值，该配置和 <code>mapstruct.defaultComponentModel</code> 一致，且具体的常量都定义在类 <code>MappingConstants.ComponentModel</code> 中。 在这两种情况下，所需的注解都将被添加到生成的转换器实现类中，以保证依赖注入的方式相同。下面展示了使用 CDI 的示例：</p><details class="custom-container details"><summary class="custom-container-title">例29：使用</summary><p>@Mapper(componentModel = MappingConstants.ComponentModel.CDI) public interface CarMapper {</p><pre><code>CarDto carToCarDto(Car car);
</code></pre><p>}</p></details><p>生成的转换器实现类会被 <code>@ApplicationScoped</code> 注解标注，并且可以使用 <code>@Inject</code> 注解，通过属性或构造器注入。</p><details class="custom-container details"><summary class="custom-container-title">例30：通过依赖注入的方式获取一个转换器</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Inject</span>
<span class="token keyword">private</span> <span class="token class-name">CarMapper</span> mapper<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></details><p>如果在一个映射器中使用其他的映射器（参考<a href="#54-%E6%89%A7%E8%A1%8C%E5%85%B6%E4%BB%96%E6%98%A0%E5%B0%84%E5%99%A8">执行其他映射器</a>），将会使用配置的组件模型来获取这些映射器的对象。所以这里如果上一个示例中 <code>CarMapper</code> 使用了另一个映射器，则该映射器也必须是一个可注入的 CDI bean。</p><h3 id="_4-3-注入策略" tabindex="-1">4.3 注入策略</h3><p>当使用依赖注入时，可以选择属性注入还是构造器注入。可以通过 <code>@Mapper</code> 或 <code>@MapperConfig</code> 注解来配置该注入策略。</p><details class="custom-container details"><summary class="custom-container-title">例31：使用构造器注入</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>componentModel <span class="token operator">=</span> <span class="token class-name">MappingConstants<span class="token punctuation">.</span>ComponentModel</span><span class="token punctuation">.</span><span class="token constant">CDI</span><span class="token punctuation">,</span> <span class="token keyword">uses</span> <span class="token operator">=</span> <span class="token class-name">EngineMapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> injectionStrategy <span class="token operator">=</span> <span class="token class-name">InjectionStrategy</span><span class="token punctuation">.</span><span class="token constant">CONSTRUCTOR</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CarMapper</span> <span class="token punctuation">{</span>
    <span class="token class-name">CarDto</span> <span class="token function">carToCarDto</span><span class="token punctuation">(</span><span class="token class-name">Car</span> car<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><p>如果 MapStruct 检测到 uses 属性中定义了其他的映射器时，则会在生成的映射器实现类中注入这些类的实例。 当使用 <code>InjectionStrategy#CONSTRUCTOR</code> 策略时，将会在构造器上增加合适的注解，而不会添加到属性上面。 当使用 <code>InjectionStrategy#FIELD</code> 策略时，注解会被添加到属性本身上。默认的注入策略是属性注入，但是可以在<a href="#24-%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9">配置选项</a>中进行配置。 推荐使用构造器注入，来简化测试。</p>`,21),N=n("div",{class:"custom-container info"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"INFO"),n("p",null,"对于抽象类映射器，应当使用 setter 注入策略")],-1);function T(R,G){const t=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("可以在 Github 中的 [mapstruct-example]("),n("a",r,[s("mapstruct-examples/mapstruct-on-gradle at main · mapstruct/mapstruct-examples (github.com)"),e(t)]),s(") 查看完整的例子。")]),d,n("p",null,[s("可以在 Github 中的 [mapstruct-example]("),n("a",k,[s("mapstruct-examples/mapstruct-on-gradle at main · mapstruct/mapstruct-examples (github.com)"),e(t)]),s(") 查看完整的例子。")]),m,n("p",null,[s("Intellij IDEA 中可以安装 "),n("a",v,[s("MapStruct Support"),e(t)]),s(" 插件，更好的使用 MapStruct。")]),g,b,y,w,n("p",null,[s("可以在 "),n("a",h,[s("mapstruct-example-field-mapping"),e(t)]),s(" 中查看完整的示例。")]),M,f,C,x,D,n("ul",null,[n("li",null,[s("Lombok："),n("s",null,[s("需要将 Lombok 类放在单独的模块中。有关更多信息，可以查看 "),n("a",E,[s("lombok#1538"),e(t)])]),s("，并使用 MapStruct 设置 Lombok，请参阅 "),S,s("。")])]),j,q,A,_,B,I,P,N])}const F=p(i,[["render",T],["__file","1-5-5-Final.html.vue"]]);export{F as default};
