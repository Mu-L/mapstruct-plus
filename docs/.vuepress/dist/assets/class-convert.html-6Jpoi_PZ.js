import{_ as i,r as p,o as l,c as u,d as s,w as e,e as o,a as n,b as a}from"./app-R75PxRwX.js";const r={},d=o(`<h2 id="simple-conversion" tabindex="-1">Simple Conversion</h2><p><strong>To convert between two classes, simply add the annotation <code>@AutoMapper</code> to one of the classes, configure the <code>target</code> attribute, and specify the target class.</strong></p><p>eg：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">CarDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This example shows that an interface <code>CarToCarDtoMapper</code> and implementation class <code>CarToCarDtoMapperImpl</code> will be generated for <code>Car</code> to <code>CarDto</code>. In the generated conversion code, all readable attributes of the source type(<code>Car</code>) are copied to the corresponding attribute of the target attribute type(<code>CarDto</code>).</p><p>When an attribute has the same name as its target entity counterpart, it is implicitly mapped.</p><p>In addition, MapStructPlus generates the <code>CarDto</code> to <code>Car</code> interface <code>CarDtoToCarMapper</code> and the implementation class <code>CarDtoToCarMapperImpl</code> according to the current default rules. If you do not want to generate the transformation logic, you can configure it by using the <code>reverseConvertGenerate</code> property of the annotation.</p><h2 id="the-properties-of-a-custom-object-are-automatically-converted" tabindex="-1">The properties of a custom object are automatically converted</h2><p>When property by custom class exists in the class to be converted, the conversion method for that type is automatically found.</p><p>For example, there are two sets of object module: <code>Car</code> and <code>SeatConfiguration</code>, <code>Car</code> depends on <code>SeatConfiguration</code></p><p>The corresponding objects are as follows：</p><ul><li>car</li></ul>`,12),k=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@AutoMapper"),n("span",{class:"token punctuation"},"("),a("target "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token class-name"},"CarDto"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token annotation punctuation"},"@Data"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"Car"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"SeatConfiguration"),a(" seatConfiguration"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),m=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"CarDto"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"SeatConfigurationDto"),a(" seatConfiguration"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("ul",null,[n("li",null,"seat configuration")],-1),b=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),a(`
`),n("span",{class:"token annotation punctuation"},"@AutoMapper"),n("span",{class:"token punctuation"},"("),a("target "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token class-name"},"SeatConfigurationDto"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"SeatConfiguration"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// fields"),a(`
`),n("span",{class:"token punctuation"},"}"),a(` 
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"SeatConfigurationDto"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// fields"),a(`
`),n("span",{class:"token punctuation"},"}"),a(` 
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=o(`<p>In the above example, the <code>CarToCarDtoMapper</code> and <code>SeatConfigurationToSeatConfigurationDtoMapper</code> conversion interfaces are generated, and <code>SeatConfigurationToSeatConfigurationDtoMapper</code> is automatically used to convert the seat properties in the <code>Car</code> conversion.</p><h2 id="introduces-custom-type-converter" tabindex="-1">Introduces custom type converter</h2><p>When different types of properties want to be converted according to custom rules, there are two ways:</p><ol><li>Configuration through the <code>expression</code> configured in <code>@AutoMapping</code></li><li>Customize a type converter, introduced through the &#39;uses&#39; attribute of <code>@AutoMapping</code></li></ol><p>For mode one, refer to the section<a href="#expresions">expresions</a> below.</p><p>This is based on mode two, where the implementation converts a <code>String</code> type attribute, separated by commas, to a <code>List&lt;String&gt;</code> type attribute:</p><p>First, define a type converter --- <code>StringToListString</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToListString</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">stringToListString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),y=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("ul",null,[n("li",null,[a("Type converter provides type conversion methods thas can be defined as "),n("code",null,"static"),a(" or "),n("code",null,"nonstatic"),a(".")]),n("li",null,[a("If you are using the framework based on the "),n("code",null,"SpringBoot"),a(" approach, the type converter need to be defined as a Spring Bean.")])])],-1),f=o(`<p>Next, use is:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">uses</span> <span class="token operator">=</span> <span class="token class-name">StringToListStringConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDto</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> young<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;educationList&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> educations<span class="token punctuation">;</span>
    <span class="token comment">// ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Test：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickStartTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Converter</span> converter<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ueseTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserDto</span> userDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDto<span class="token punctuation">.</span><span class="token function">setEducations</span><span class="token punctuation">(</span><span class="token string">&quot;1,2,3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> <span class="token class-name">User</span> user <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>userDto<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getEducationList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [1, 2, 3]</span>

        <span class="token keyword">assert</span> user<span class="token punctuation">.</span><span class="token function">getEducationList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="custom-property-conversions" tabindex="-1">Custom Property conversions</h2><p>When there are inconsistent scenarios for attributes in the two classes, such as name, type, and so on, you can used to configure the mapping rules by add <code>@AutoMapping</code> to the attributes.</p><h3 id="different-attribute-name-mappings" tabindex="-1">Different attribute name mappings</h3><p>In the <code>@AutoMapping</code> annotation, the <code>target</code> attribute is provided to configure the mapping between the current attribute and the <code>target</code> attribute in the target class.</p><p>For example, when <code>Car</code> is converted to <code>CarDto</code>, the <code>seatConfiguration</code> attribute corresponds to the <code>seat</code> attribute:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">CarDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;seat&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">SeatConfiguration</span> seatConfiguration<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>@AutoMapping</code> annotation also provides the <code>source</code> attribute, which by default takes the name of the current property and can be configured to fit a scenario there a property of the current class, its internal property, to a property field in the target, you can configure it with the current property.</p><p>eg：</p>`,12),w=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),a(`
`),n("span",{class:"token annotation punctuation"},"@AutoMapper"),n("span",{class:"token punctuation"},"("),a("target "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token class-name"},"GoodsVo"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},","),a(" reverseConvertGenerate "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"Goods"),a(),n("span",{class:"token punctuation"},"{"),a(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),a("source "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"sku.price"'),n("span",{class:"token punctuation"},","),a(" target "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"price"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"Sku"),a(" sku"),n("span",{class:"token punctuation"},";"),a(`

`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"GoodsVo"),a(),n("span",{class:"token punctuation"},"{"),a(`

    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"Integer"),a(" price"),n("span",{class:"token punctuation"},";"),a(`

`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=o('<h3 id="specifies-the-time-format" tabindex="-1">Specifies the time format</h3><p>When the time type(for example <code>Date</code>、<code>LocalDateTime</code>、<code>LocalDate</code>...) needs to be converted with <code>String</code> by specifying the time format, you can configure it with <code>dateFormat</code> in <code>@AutoMapping</code></p><p>eg：</p>',3),M=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),a(`
`),n("span",{class:"token annotation punctuation"},"@AutoMapper"),n("span",{class:"token punctuation"},"("),a("target "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token class-name"},"OrderEntity"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"Order"),a(),n("span",{class:"token punctuation"},"{"),a(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),a("dateFormat "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"yyyy-MM-dd HH:mm:ss"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"LocalDateTime"),a(" orderTime"),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),a("dateFormat "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"yyyy_MM_dd HH:mm:ss"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"Date"),a(" createTime"),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),a("target "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"orderDate"'),n("span",{class:"token punctuation"},","),a(" dateFormat "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"yyyy-MM-dd"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"String"),a(" date"),n("span",{class:"token punctuation"},";"),a(`

`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),T=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),a(`
`),n("span",{class:"token annotation punctuation"},"@AutoMapper"),n("span",{class:"token punctuation"},"("),a("target "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token class-name"},"Order"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"OrderEntity"),a(),n("span",{class:"token punctuation"},"{"),a(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),a("dateFormat "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"yyyy-MM-dd HH:mm:ss"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"String"),a(" orderTime"),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),a("dateFormat "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"yyyy_MM_dd HH:mm:ss"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"String"),a(" createTime"),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),a("target "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"date"'),n("span",{class:"token punctuation"},","),a(" dateFormat "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"yyyy-MM-dd"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"LocalDate"),a(" orderDate"),n("span",{class:"token punctuation"},";"),a(`

`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=o('<h3 id="specifies-a-numeric-format" tabindex="-1">Specifies a numeric format</h3><p>When the conversion between a numeric type(for example <code>int</code>/<code>Integer</code> and the wrapper class、<code>BigDecimal</code>) and <code>String</code> requires a numeric format, it can be configured with <code>numberFormat</code> in <code>@AutoMapping</code></p><blockquote><p>This format need to be supported by <code>java.text.DecimalFormat</code></p></blockquote><p>eg：</p>',4),j=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),a(`
`),n("span",{class:"token annotation punctuation"},"@AutoMapper"),n("span",{class:"token punctuation"},"("),a("target "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token class-name"},"OrderEntity"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"Order"),a(),n("span",{class:"token punctuation"},"{"),a(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),a("numberFormat "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"$0.00"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"BigDecimal"),a(" orderPrice"),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),a("numberFormat "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"$0.00"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"Integer"),a(" goodsNum"),n("span",{class:"token punctuation"},";"),a(`
    
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),a(`
`),n("span",{class:"token annotation punctuation"},"@AutoMapper"),n("span",{class:"token punctuation"},"("),a("target "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token class-name"},"Order"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"OrderEntity"),a(),n("span",{class:"token punctuation"},"{"),a(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),a("numberFormat "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"$0.00"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"String"),a(" orderPrice"),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),a("numberFormat "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"$0.00"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"String"),a(" goodsNum"),n("span",{class:"token punctuation"},";"),a(`
    
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=o(`<h3 id="ignore-the-specifies-property" tabindex="-1">Ignore the specifies property</h3><p>When the transformation is performed, the transformation of the specified property needs to be ignored, which can be configured using the <code>ignore</code> of <code>@AutoMapping</code></p><p>es：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">CarDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;wheels&quot;</span><span class="token punctuation">,</span> ignore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Wheels</span> wheels<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="default-value" tabindex="-1">default value</h3><p><code>defaultValue</code> in <code>@AutoMapping</code> can specify the default value to convert to the target class when the property value is null.</p><p>eg：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">DefaultVo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultDto</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">&quot;18&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> i<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">&quot;1.32&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> d<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> b<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="expression" tabindex="-1">expression</h3><p>When you perform a property conversion, you can perform the conversion operation by specifying that a piece of Java code be executed, for example, to return after converting a property in a source object.</p><p>Note that at compile time, the expression is inserted directly into the transformation logic and its synatax is not validated.</p><p>For example, the <code>List&lt;String&gt;</code> attribute in the source object is concatenated into a string by &#39;,&#39;:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">UserDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;educations&quot;</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">&quot;java(java.lang.String.join(\\&quot;,\\&quot;, source.getEducationList()))&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> educationList<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="automatically-access-the-custom-converter-interface" tabindex="-1">Automatically access the custom converter interface</h2>`,14),S=n("div",{class:"custom-container info"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"INFO"),n("p",null,[a("since "),n("code",null,"1.2.3")])],-1),I=n("p",null,"When some type conversion logic is more complex, you can use define converter interface to achive, that is, using MapStruct native way.",-1),O=n("p",null,"When used this way, the default generated type conversion is automatically referenced if there is previously provided type conversion.",-1),q=n("p",null,"例如：",-1),F=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@AutoMapper"),n("span",{class:"token punctuation"},"("),a("target "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token class-name"},"CarDto"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token annotation punctuation"},"@Data"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"Car"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"Tyre"),a(" tyre"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"CarDto"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"TyreDTO"),a(" tyre"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),W=o(`<p>Converter interface between <code>Tyre</code> and <code>TyreDTO</code> is defined here.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>componentModel <span class="token operator">=</span> <span class="token class-name">MappingConstants<span class="token punctuation">.</span>ComponentModel</span><span class="token punctuation">.</span><span class="token constant">SPRING</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TyreMapper</span> <span class="token punctuation">{</span>

    <span class="token class-name">TyreDTO</span> <span class="token function">tyreToTyreDTO</span><span class="token punctuation">(</span><span class="token class-name">Tyre</span> tyre<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Tyre</span> <span class="token function">tyreDtoToTyre</span><span class="token punctuation">(</span><span class="token class-name">TyreDTO</span> tyreDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The generated implementation classes for the <code>Car</code> and <code>CarDto</code> converter interfaces are as follows:</p>`,3),G=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Generated"),n("span",{class:"token punctuation"},"("),a(`
    value `),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"org.mapstruct.ap.MappingProcessor"'),n("span",{class:"token punctuation"},","),a(`
    date `),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"2023-04-24T15:38:48+0800"'),n("span",{class:"token punctuation"},","),a(`
    comments `),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"version: 1.5.5.Final, compiler: javac, environment: Java 1.8.0_202 (Oracle Corporation)"'),a(`
`),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token annotation punctuation"},"@Component"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"CarToCarDtoMapperImpl"),a(),n("span",{class:"token keyword"},"implements"),a(),n("span",{class:"token class-name"},"CarToCarDtoMapper"),a(),n("span",{class:"token punctuation"},"{"),a(`

    `),n("span",{class:"token annotation punctuation"},"@Autowired"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"TyreMapper"),a(" tyreMapper"),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token annotation punctuation"},"@Override"),a(`
    `),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token class-name"},"CarDto"),a(),n("span",{class:"token function"},"convert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Car"),a(" source"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a(" source "),n("span",{class:"token operator"},"=="),a(),n("span",{class:"token keyword"},"null"),a(),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
            `),n("span",{class:"token keyword"},"return"),a(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),a(`
        `),n("span",{class:"token punctuation"},"}"),a(`

        `),n("span",{class:"token class-name"},"CarDto"),a(" carDto "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token class-name"},"CarDto"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`

        carDto`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setTyre"),n("span",{class:"token punctuation"},"("),a(" tyreMapper"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"tyreToTyreDTO"),n("span",{class:"token punctuation"},"("),a(" source"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getTyre"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`

        `),n("span",{class:"token keyword"},"return"),a(" carDto"),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`

    `),n("span",{class:"token annotation punctuation"},"@Override"),a(`
    `),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token class-name"},"CarDto"),a(),n("span",{class:"token function"},"convert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Car"),a(" source"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token class-name"},"CarDto"),a(" target"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a(" source "),n("span",{class:"token operator"},"=="),a(),n("span",{class:"token keyword"},"null"),a(),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
            `),n("span",{class:"token keyword"},"return"),a(" target"),n("span",{class:"token punctuation"},";"),a(`
        `),n("span",{class:"token punctuation"},"}"),a(`

        target`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setTyre"),n("span",{class:"token punctuation"},"("),a(" tyreMapper"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"tyreToTyreDTO"),n("span",{class:"token punctuation"},"("),a(" source"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getTyre"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`

        `),n("span",{class:"token keyword"},"return"),a(" target"),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Generated"),n("span",{class:"token punctuation"},"("),a(`
    value `),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"org.mapstruct.ap.MappingProcessor"'),n("span",{class:"token punctuation"},","),a(`
    date `),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"2023-04-24T15:38:49+0800"'),n("span",{class:"token punctuation"},","),a(`
    comments `),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"version: 1.5.5.Final, compiler: javac, environment: Java 1.8.0_202 (Oracle Corporation)"'),a(`
`),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token annotation punctuation"},"@Component"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"CarDtoToCarMapperImpl"),a(),n("span",{class:"token keyword"},"implements"),a(),n("span",{class:"token class-name"},"CarDtoToCarMapper"),a(),n("span",{class:"token punctuation"},"{"),a(`

    `),n("span",{class:"token annotation punctuation"},"@Autowired"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"TyreMapper"),a(" tyreMapper"),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token annotation punctuation"},"@Override"),a(`
    `),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token class-name"},"Car"),a(),n("span",{class:"token function"},"convert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"CarDto"),a(" source"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a(" source "),n("span",{class:"token operator"},"=="),a(),n("span",{class:"token keyword"},"null"),a(),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
            `),n("span",{class:"token keyword"},"return"),a(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),a(`
        `),n("span",{class:"token punctuation"},"}"),a(`

        `),n("span",{class:"token class-name"},"Car"),a(" car "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token class-name"},"Car"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`

        car`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setTyre"),n("span",{class:"token punctuation"},"("),a(" tyreMapper"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"tyreDtoToTyre"),n("span",{class:"token punctuation"},"("),a(" source"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getTyre"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`

        `),n("span",{class:"token keyword"},"return"),a(" car"),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`

    `),n("span",{class:"token annotation punctuation"},"@Override"),a(`
    `),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token class-name"},"Car"),a(),n("span",{class:"token function"},"convert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"CarDto"),a(" source"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token class-name"},"Car"),a(" target"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a(" source "),n("span",{class:"token operator"},"=="),a(),n("span",{class:"token keyword"},"null"),a(),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
            `),n("span",{class:"token keyword"},"return"),a(" target"),n("span",{class:"token punctuation"},";"),a(`
        `),n("span",{class:"token punctuation"},"}"),a(`

        target`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setTyre"),n("span",{class:"token punctuation"},"("),a(" tyreMapper"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"tyreDtoToTyre"),n("span",{class:"token punctuation"},"("),a(" source"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getTyre"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),a(`

        `),n("span",{class:"token keyword"},"return"),a(" target"),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=n("h2",{id:"configuration-for-reverse-property-mapping",tabindex:"-1"},"Configuration for reverse property mapping",-1),V=n("div",{class:"custom-container info"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"INFO"),n("p",null,[n("strong",null,[a("In this article, all the mentioned source classes refer to classes annotated by "),n("code",null,"@AutoMapper"),a("; the target classes refer to the type specified by the "),n("code",null,"target"),a(" attribute in "),n("code",null,"@AutoMapper"),a(".")])])],-1),E=o("<p>As mentioned earlier, when you add the <code>@AutoMapper</code> annotation to a class, by default, generate not only the source-to-target converter interface, but also the target-to-source converter interface and implementation class, note here that the converter interface generated by default does not any custom configuration, even if the <code>@AutoMapping</code> annotation is configured in the source class.</p><p>There are two ways to implement a custom converter configuration from the target class to the source class:</p><ol><li>Add the <code>@AutoMapper</code> annotation above the target class. This is the most recommended approach, when both sides add this annotation, the default converter interface for target-to-source is not generated, that is, it is generated according to custom rules.</li><li>When the target class does not have access to the source class, or the project specification does not allow such annotations to be added to the target class, you can add the custom configuration entirelyto the source class. This is the <strong>reverse attribute mapping configuration</strong> described below.</li></ol><p>The <code>@ReverseAutoMapping</code> annotation is provided in the framework to configure custom conversion rules from the target class to the source class.</p>",4),H=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("p",null,[a("Note here that to prevent configuration conflicts, once you add the "),n("code",null,"@ReverseAutoMapping"),a(" annotation, you can not add any custom conversion annotations to the target class.")])],-1),U=o(`<p><strong>The meaning of the <code>@ReverseAutoMapping</code> annotation is that when the target class is converted to the source class, the custom rules need to be specified, where the attributes can be configured, consistent with the <code>@AutoMapping</code> annotation.</strong></p><p>There are two attributes to note here, <code>source</code> and <code>target</code>.</p><p><strong>Here the <code>source</code> refers to the attributes in the target class, and the <code>target</code> refers to the attributes in the source class.</strong></p><p>One might wonder why the configuration here seems to be reversed? If not, you can skip it.</p><p>When the framework is designed, all the attribute transformation configurations are based on the type to be converted, with the ultimate effect of converting the class to the target class. So The <code>source</code> here should also be an attribute in the source class.</p><p>If you sill don&#39;t understand it, you can assume that the annotation is the <code>@AutoMapping</code> annotation that should have been applied to the target class. Just copy it to the current class and change the annotation name.</p><h2 id="immutable-type" tabindex="-1">Immutable type</h2><blockquote><p>since 1.3.2</p></blockquote><p>When source type is immutable, the <code>T convert(S source, @MappingTarget T target)</code> method generated by the previous default rule may have problems.</p><p>So, you can use the <code>Immutable</code> annotation under any package to identify a class as an Immutable type, When an immutable type is used, the <code>@MappingTarget</code> makes no sense, and the above method eventually generates the following:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">S</span> source<span class="token punctuation">,</span> <span class="token annotation punctuation">@MappingTarget</span> <span class="token class-name">T</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function P(R,J){const t=p("CodeGroupItem"),c=p("CodeGroup");return l(),u("div",null,[d,s(c,null,{default:e(()=>[s(t,{title:"Car"},{default:e(()=>[k]),_:1}),s(t,{title:"CarDto"},{default:e(()=>[m]),_:1})]),_:1}),v,s(c,null,{default:e(()=>[s(t,{title:"SeatConfiguration"},{default:e(()=>[b]),_:1}),s(t,{title:"SeatConfigurationDto"},{default:e(()=>[g]),_:1})]),_:1}),h,y,f,s(c,null,{default:e(()=>[s(t,{title:"Goods"},{default:e(()=>[w]),_:1}),s(t,{title:"GoodsVo"},{default:e(()=>[C]),_:1})]),_:1}),_,s(c,null,{default:e(()=>[s(t,{title:"Order"},{default:e(()=>[M]),_:1}),s(t,{title:"OrderEntity"},{default:e(()=>[T]),_:1})]),_:1}),D,s(c,null,{default:e(()=>[s(t,{title:"Order"},{default:e(()=>[j]),_:1}),s(t,{title:"OrderEntity"},{default:e(()=>[x]),_:1})]),_:1}),A,S,I,O,q,s(c,null,{default:e(()=>[s(t,{title:"Car"},{default:e(()=>[F]),_:1}),s(t,{title:"CarDto"},{default:e(()=>[L]),_:1})]),_:1}),W,s(c,null,{default:e(()=>[s(t,{title:"CarToCarDtoMapperImpl"},{default:e(()=>[G]),_:1}),s(t,{title:"CarDtoToCarMapperImpl"},{default:e(()=>[N]),_:1})]),_:1}),B,V,E,H,U])}const z=i(r,[["render",P],["__file","class-convert.html.vue"]]);export{z as default};
