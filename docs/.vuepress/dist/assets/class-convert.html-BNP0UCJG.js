import{_ as l,r as p,o as i,c as u,d as a,w as e,e as o,a as n,b as s}from"./app-R75PxRwX.js";const r={},d=o(`<h2 id="简单转换" tabindex="-1">简单转换</h2><p><strong>要实现两个类之间的转换，只需要在其中一个类上增加注解 <code>@AutoMapper</code> ，配置 <code>target</code> 属性，指定目标类即可</strong>。</p><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">CarDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该例子表示，会生成 <code>Car</code> 转换为 <code>CarDto</code> 的接口 <code>CarToCarDtoMapper</code> 及实现类 <code>CarToCarDtoMapperImpl</code>。在生成的转换代码中，源类型（<code>Car</code>）的所有可读属性将被复制到目标属性类型（<code>CarDto</code>）的相应属性中。</p><p>当一个属性与它的目标实体对应物具有相同的名称时，将会被隐式映射。</p><p>除此之外，MapStructPlus 会根据当前的默认规则，生成 <code>CarDto</code> 转换为 <code>Car</code> 的接口 <code>CarDtoToCarMapper</code> 及实现类 <code>CarDtoToCarMapperImpl</code>。如果不想生成该转换逻辑的话，可以通过注解的 <code>reverseConvertGenerate</code> 属性来配置。</p><h2 id="自定义对象的属性自动转换" tabindex="-1">自定义对象的属性自动转换</h2><p>当要转换的类中，存在自定义类时，会自动寻找该类型的转换方法。</p><p>例如，分别有两组对象模型：汽车（<code>Car</code>）和座椅（<code>SeatConfiguration</code>），其中 <code>Car</code> 依赖于 <code>SeatConfiguration</code>。</p><p>分别对应对象如下：</p><ul><li>汽车模型</li></ul>`,12),k=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@AutoMapper"),n("span",{class:"token punctuation"},"("),s("target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"CarDto"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Car"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"SeatConfiguration"),s(" seatConfiguration"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"CarDto"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"SeatConfigurationDto"),s(" seatConfiguration"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),m=n("ul",null,[n("li",null,"座椅模型")],-1),b=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token annotation punctuation"},"@AutoMapper"),n("span",{class:"token punctuation"},"("),s("target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"SeatConfigurationDto"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"SeatConfiguration"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// fields"),s(`
`),n("span",{class:"token punctuation"},"}"),s(` 
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"SeatConfigurationDto"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// fields"),s(`
`),n("span",{class:"token punctuation"},"}"),s(` 
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=o(`<p>在上面的例子中，首先会生成 <code>CarToCarDtoMapper</code> 和 <code>SeatConfigurationToSeatConfigurationDtoMapper</code> 两个转换接口，并且在转换 <code>Car</code> 时，会自动使用 <code>SeatConfigurationToSeatConfigurationDtoMapper</code> 来对其中的座椅属性来进行转换。</p><h2 id="引入自定义类型转换器" tabindex="-1">引入自定义类型转换器</h2><p>当不同类型的属性，想要按照自定义的规则进行转换时，可以有两种办法：</p><ol><li>通过 <code>@AutoMapping</code> 中配置的 <code>expression</code> 表达式配置</li><li>自定义一个类型转换器，通过 <code>@AutoMapper</code> 的 <code>uses</code> 属性来引入</li></ol><p>方式一可以参考下面的<a href="#%E8%A1%A8%E8%BE%BE%E5%BC%8F">表达式</a>章节。</p><p>这里基于方式二，实现将 <code>String</code> 类型的属性，根据逗号分隔，转换为 <code>List&lt;String&gt;</code> 类型的属性：</p><p>首先，定义一个类型转换器 —— <code>StringToListString</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToListString</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">stringToListString</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),w=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("ul",null,[n("li",null,[s("类型转换器提供的类型转换方法，可以定义为 "),n("code",null,"static"),s(" 或 "),n("code",null,"nonstatic"),s("的。")]),n("li",null,[s("如果是基于 "),n("code",null,"SpringBoot"),s(" 的方式使用该框架，则类型转换器需要定义为 Spring 的一个 Bean。")])])],-1),h=o(`<p>下一步，使用该类型转换器：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">uses</span> <span class="token operator">=</span> <span class="token class-name">StringToListStringConverter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDto</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> young<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;educationList&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> educations<span class="token punctuation">;</span>
    <span class="token comment">// ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickStartTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Converter</span> converter<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ueseTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserDto</span> userDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDto<span class="token punctuation">.</span><span class="token function">setEducations</span><span class="token punctuation">(</span><span class="token string">&quot;1,2,3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> <span class="token class-name">User</span> user <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>userDto<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getEducationList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [1, 2, 3]</span>

        <span class="token keyword">assert</span> user<span class="token punctuation">.</span><span class="token function">getEducationList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义属性转换" tabindex="-1">自定义属性转换</h2><p>当两个类中属性存在不一致的场景时，例如名称、类型等不一致，可以进行自定义转换，通过在属性上面添加 <code>@AutoMapping</code>，来配置映射规则。</p><h3 id="不同属性名称映射" tabindex="-1">不同属性名称映射</h3><p><code>@AutoMapping</code> 注解中，提供了 <code>target</code> 属性，可以配置当前属性与目标类中 <code>target</code> 属性之间映射。</p><p>例如，<code>Car</code> 转换为 <code>CatDto</code> 时，<code>seatConfiguration</code> 属性与 <code>seat</code> 属性相对应：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">CarDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;seat&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">SeatConfiguration</span> seatConfiguration<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@AutoMapping</code> 注解中还提供 <code>source</code> 方法，该配置默认取当前属性的名称，之所以可以配置，是为了适应一种场景，当前类的某个属性，其内部的属性，转换为目标中的属性字段，则可以通过当前属性来配置。</p><p>例如：</p>`,12),_=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token annotation punctuation"},"@AutoMapper"),n("span",{class:"token punctuation"},"("),s("target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"GoodsVo"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},","),s(" reverseConvertGenerate "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Goods"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),s("source "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"sku.price"'),n("span",{class:"token punctuation"},","),s(" target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"price"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"Sku"),s(" sku"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"GoodsVo"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"Integer"),s(" price"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),M=o('<h3 id="指定时间格式转换" tabindex="-1">指定时间格式转换</h3><p>当时间类型（例如：<code>Date</code>、<code>LocalDateTime</code>、<code>LocalDate</code> 等等）需要和 <code>String</code> 通过指定时间格式进行转换时，可以通过 <code>@AutoMapping</code> 中的 <code>dateFormat</code> 来配置：</p><p>例如：</p>',3),f=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token annotation punctuation"},"@AutoMapper"),n("span",{class:"token punctuation"},"("),s("target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"OrderEntity"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Order"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),s("dateFormat "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"yyyy-MM-dd HH:mm:ss"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"LocalDateTime"),s(" orderTime"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),s("dateFormat "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"yyyy_MM_dd HH:mm:ss"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"Date"),s(" createTime"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),s("target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"orderDate"'),n("span",{class:"token punctuation"},","),s(" dateFormat "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"yyyy-MM-dd"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" date"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token annotation punctuation"},"@AutoMapper"),n("span",{class:"token punctuation"},"("),s("target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Order"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"OrderEntity"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),s("dateFormat "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"yyyy-MM-dd HH:mm:ss"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" orderTime"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),s("dateFormat "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"yyyy_MM_dd HH:mm:ss"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" createTime"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),s("target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"date"'),n("span",{class:"token punctuation"},","),s(" dateFormat "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"yyyy-MM-dd"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"LocalDate"),s(" orderDate"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=o('<h3 id="指定数字格式转换" tabindex="-1">指定数字格式转换</h3><p>当数字类型（例如：<code>int</code>/<code>Integer</code> 等数字基本类型及包装类、<code>BigDecimal</code>）和 <code>String</code> 之间的转换需要指定数字格式，可以通过 <code>@AutoMapping</code> 的 <code>numberFormat</code> 来配置。</p><blockquote><p>该格式需要 <code>java.text.DecimalFormat</code> 所支持</p></blockquote><p>例如：</p>',4),T=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token annotation punctuation"},"@AutoMapper"),n("span",{class:"token punctuation"},"("),s("target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"OrderEntity"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Order"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),s("numberFormat "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"$0.00"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"BigDecimal"),s(" orderPrice"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),s("numberFormat "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"$0.00"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"Integer"),s(" goodsNum"),n("span",{class:"token punctuation"},";"),s(`
    
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token annotation punctuation"},"@AutoMapper"),n("span",{class:"token punctuation"},"("),s("target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Order"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"OrderEntity"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),s("numberFormat "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"$0.00"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" orderPrice"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token annotation punctuation"},"@AutoMapping"),n("span",{class:"token punctuation"},"("),s("numberFormat "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"$0.00"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" goodsNum"),n("span",{class:"token punctuation"},";"),s(`
    
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=o(`<h3 id="忽略指定属性的转换" tabindex="-1">忽略指定属性的转换</h3><p>当在进行转换时，需要忽略指定属性的转换，可以通过 <code>@AutoMapping</code> 的 <code>ignore</code> 来配置。</p><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">CarDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;wheels&quot;</span><span class="token punctuation">,</span> ignore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Wheels</span> wheels<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="属性转换时的默认值" tabindex="-1">属性转换时的默认值</h3><p><code>@AutoMapping</code> 中的 <code>defaultValue</code> 可以指定在转换属性时，当属性为 <code>null</code> 时，转换到目标类中的默认值。</p><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">DefaultVo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultDto</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">&quot;18&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> i<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">&quot;1.32&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Double</span> d<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> b<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="表达式" tabindex="-1">表达式</h3><p>在执行属性转换时，可以通过指定执行一段 Java 代码来进行转换操作，例如，对源对象中的某个属性进行转换后返回。</p><p>需要注意的是，在生成时，会直接将表达式插入到转换逻辑中，并不会验证其语法。</p><p>例如，将源对象中的 <code>List&lt;String&gt;</code> 属性，通过 <code>,</code> 拼接为字符串：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">UserDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token string">&quot;educations&quot;</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">&quot;java(java.lang.String.join(\\&quot;,\\&quot;, source.getEducationList()))&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> educationList<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自动接入自定义转换接口" tabindex="-1">自动接入自定义转换接口</h2>`,14),S=n("div",{class:"custom-container info"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"INFO"),n("p",null,[s("since "),n("code",null,"1.2.3")])],-1),O=n("p",null,"当有的类型转换逻辑比较复杂，可以通过自定义转换接口来实现，即使用 MapStruct 原生的方式。",-1),q=n("p",null,"当使用这种方式时，默认生成的类型转换中，如果有前面提供的类型转换时，会自动引用。",-1),F=n("p",null,"例如：",-1),I=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@AutoMapper"),n("span",{class:"token punctuation"},"("),s("target "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"CarDto"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Car"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"Tyre"),s(" tyre"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"CarDto"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"TyreDTO"),s(" tyre"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=o(`<p>这里定义 <code>Tyre</code> 和 <code>TyreDTO</code> 之间的转换接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Mapper</span><span class="token punctuation">(</span>componentModel <span class="token operator">=</span> <span class="token class-name">MappingConstants<span class="token punctuation">.</span>ComponentModel</span><span class="token punctuation">.</span><span class="token constant">SPRING</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TyreMapper</span> <span class="token punctuation">{</span>

    <span class="token class-name">TyreDTO</span> <span class="token function">tyreToTyreDTO</span><span class="token punctuation">(</span><span class="token class-name">Tyre</span> tyre<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Tyre</span> <span class="token function">tyreDtoToTyre</span><span class="token punctuation">(</span><span class="token class-name">TyreDTO</span> tyreDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的 <code>Car</code> 与 <code>CarDto</code> 转换接口的实现类如下：</p>`,3),E=n("p",null,"::: CarToCarDtoMapperImpl",-1),G=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Generated"),n("span",{class:"token punctuation"},"("),s(`
    value `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"org.mapstruct.ap.MappingProcessor"'),n("span",{class:"token punctuation"},","),s(`
    date `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"2023-04-24T15:38:48+0800"'),n("span",{class:"token punctuation"},","),s(`
    comments `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"version: 1.5.5.Final, compiler: javac, environment: Java 1.8.0_202 (Oracle Corporation)"'),s(`
`),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token annotation punctuation"},"@Component"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"CarToCarDtoMapperImpl"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"CarToCarDtoMapper"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Autowired"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"TyreMapper"),s(" tyreMapper"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"CarDto"),s(),n("span",{class:"token function"},"convert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Car"),s(" source"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" source "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        `),n("span",{class:"token class-name"},"CarDto"),s(" carDto "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"CarDto"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        carDto`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setTyre"),n("span",{class:"token punctuation"},"("),s(" tyreMapper"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"tyreToTyreDTO"),n("span",{class:"token punctuation"},"("),s(" source"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getTyre"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token keyword"},"return"),s(" carDto"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"CarDto"),s(),n("span",{class:"token function"},"convert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Car"),s(" source"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"CarDto"),s(" target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" source "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),s(" target"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        target`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setTyre"),n("span",{class:"token punctuation"},"("),s(" tyreMapper"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"tyreToTyreDTO"),n("span",{class:"token punctuation"},"("),s(" source"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getTyre"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token keyword"},"return"),s(" target"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),N=n("p",null,"::: ::: CarDtoToCarMapperImpl",-1),V=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Generated"),n("span",{class:"token punctuation"},"("),s(`
    value `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"org.mapstruct.ap.MappingProcessor"'),n("span",{class:"token punctuation"},","),s(`
    date `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"2023-04-24T15:38:49+0800"'),n("span",{class:"token punctuation"},","),s(`
    comments `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"version: 1.5.5.Final, compiler: javac, environment: Java 1.8.0_202 (Oracle Corporation)"'),s(`
`),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token annotation punctuation"},"@Component"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"CarDtoToCarMapperImpl"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"CarDtoToCarMapper"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Autowired"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"TyreMapper"),s(" tyreMapper"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Car"),s(),n("span",{class:"token function"},"convert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"CarDto"),s(" source"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" source "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        `),n("span",{class:"token class-name"},"Car"),s(" car "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Car"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        car`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setTyre"),n("span",{class:"token punctuation"},"("),s(" tyreMapper"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"tyreDtoToTyre"),n("span",{class:"token punctuation"},"("),s(" source"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getTyre"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token keyword"},"return"),s(" car"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Override"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Car"),s(),n("span",{class:"token function"},"convert"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"CarDto"),s(" source"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Car"),s(" target"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s(" source "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),s(" target"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`

        target`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setTyre"),n("span",{class:"token punctuation"},"("),s(" tyreMapper"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"tyreDtoToTyre"),n("span",{class:"token punctuation"},"("),s(" source"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getTyre"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token keyword"},"return"),s(" target"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),U=n("p",null,":::",-1),H=n("h2",{id:"反向属性映射配置",tabindex:"-1"},"反向属性映射配置",-1),P=n("div",{class:"custom-container info"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"INFO"),n("p",null,[n("strong",null,[s("在该文中，所有提到的源类指通过 "),n("code",null,"@AutoMapper"),s(" 注解的类；目标类指的是 "),n("code",null,"@AutoMapper"),s(" 中 "),n("code",null,"target"),s(" 属性指定的类型。")])])],-1),R=o("<p>前面提到，当在一个类上面添加 <code>@AutoMapper</code> 注解时，默认情况下，除了会生成源类到目标类的转换接口，还会生成目标类到源类的转换接口和实现类，这里需要注意的是，默认情况下生成的该转换接口，并没有任何自定义配置，即使在源类中配置了 <code>@AutoMapping</code> 注解。</p><p>这里要实现目标类到源类的自定义转换配置，可以有两种方式：</p><ol><li>在目标类上面添加 <code>@AutoMapper</code> 注解。这是最建议的方式，当转换双方都有添加该注解时，便不会生成默认的转换接口，即按照自定义的规则进行生成。</li><li>当目标类访问不到源类，或者项目规范不允许在目标类上面添加该种注解时，可以将自定义配置全部添加在源类中。这就是下面要介绍的<strong>反向属性映射配置</strong>。</li></ol><p>框架中提供了 <code>@ReverseAutoMapping</code> 注解，该注解就是为了配置目标类到源类的自定义转换规则。</p>",4),$=n("div",{class:"custom-container warning"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8v4"}),n("path",{d:"M12 16h.01"})])]),n("p",{class:"custom-container-title"},"WARNING"),n("p",null,[s("这里需要注意的是，防止配置冲突，一旦添加 "),n("code",null,"@ReverseAutoMapping"),s(" 注解，在目标类中，便不能添加任何自定义转换注解")])],-1),J=o(`<p><strong><code>@ReverseAutoMapping</code> 注解表示的含义，是目标类到源类转换时，需要指定的自定义转换规则，其中可以配置的属性，与 <code>@AutoMapping</code> 注解一致。</strong></p><p>这里有两个属性需要注意，分别是 <code>source</code> 和 <code>target</code>。</p><p><strong>这里的 <code>source</code> 指的是目标类中的属性，<code>target</code> 指的是源类中的属性。</strong></p><p>可能会有人这里有疑问，为什么这里的配置像是反的？如果没有，可以直接跳过。</p><p>框架设计的时候，所有的属性转换配置，都是基于要转换的类型，最终想要的效果是将该类转换为目标类。这里的 <code>source</code> 也应该是来源类中的属性。</p><p>如果还是不理解，这里可以认为，该注解就是本该应用在目标类中的 <code>@AutoMapping</code> 注解，原封不动拷贝到当前类，再修改注解名称即可。</p><h2 id="不可变类型设计" tabindex="-1">不可变类型设计</h2><blockquote><p>since 1.3.2</p></blockquote><p>当一个类型是不可变类型时，之前默认的规则，生成的 <code>T convert(S source, @MappingTarget T target)</code> 可能会存在问题。</p><p>所以，可以使用任意包下的 <code>Immutable</code> 注解，标识一个类为不可变类型， 当为不可变类型时，<code>@MappingTarget</code> 没有意义，上面的方法最终生成如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">S</span> source<span class="token punctuation">,</span> <span class="token annotation punctuation">@MappingTarget</span> <span class="token class-name">T</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function W(z,Q){const t=p("CodeGroupItem"),c=p("CodeGroup");return i(),u("div",null,[d,a(c,null,{default:e(()=>[a(t,{title:"Car"},{default:e(()=>[k]),_:1}),a(t,{title:"CarDto"},{default:e(()=>[v]),_:1})]),_:1}),m,a(c,null,{default:e(()=>[a(t,{title:"SeatConfiguration"},{default:e(()=>[b]),_:1}),a(t,{title:"SeatConfigurationDto"},{default:e(()=>[g]),_:1})]),_:1}),y,w,h,a(c,null,{default:e(()=>[a(t,{title:"Goods"},{default:e(()=>[_]),_:1}),a(t,{title:"GoodsVo"},{default:e(()=>[C]),_:1})]),_:1}),M,a(c,null,{default:e(()=>[a(t,{title:"Order"},{default:e(()=>[f]),_:1}),a(t,{title:"OrderEntity"},{default:e(()=>[D]),_:1})]),_:1}),j,a(c,null,{default:e(()=>[a(t,{title:"Order"},{default:e(()=>[T]),_:1}),a(t,{title:"OrderEntity"},{default:e(()=>[x]),_:1})]),_:1}),A,S,O,q,F,a(c,null,{default:e(()=>[a(t,{title:"Car"},{default:e(()=>[I]),_:1}),a(t,{title:"CarDto"},{default:e(()=>[L]),_:1})]),_:1}),B,a(c,null,{default:e(()=>[E,G,N,V,U]),_:1}),H,P,R,$,J])}const X=l(r,[["render",W],["__file","class-convert.html.vue"]]);export{X as default};
