import{_ as e,o as t,c as o,e as c}from"./app-S9PLs8Z3.js";const r={},n=c('<h2 id="converter" tabindex="-1">Converter</h2><p>The previous sections, which were all about configuring transformation logic on entity classes, were mainly applied at the compile stage. In practice, the framework provides the <code>Converter</code> class to perform the concreate transformation logic.</p><p>This class provides the following methods for type conversion:</p><ul><li><strong><code>&lt;S, T&gt; T convert(S source, Class&lt;T&gt; targetType)</code></strong></li></ul><p>Passes in the object and the target type to be converted, and finally returns an intance object of the target type.</p><ul><li><strong><code>&lt;S, T&gt; T convert(S source, T target)</code></strong></li></ul><p>Passes in the <code>source</code> object and <code>target</code> object, finally returns target object, and eventually converting the properties in the <code>source</code> object to the <code>target</code> object.</p><p>This method differs from the above in that it returns an incoming <code>taring</code> object, whereas the above method return a new object.</p><ul><li><strong><code>&lt;S, T&gt; List&lt;T&gt; convert(List&lt;S&gt; source, Class&lt;T&gt; targetType)</code></strong></li></ul><p>This method converts a collection of source types(<code>source</code>) to a collection of target types(<code>targetType</code>)</p><ul><li><strong><code>&lt;T&gt; T convert(Map&lt;String, Object&gt; map, Class&lt;T&gt; target)</code></strong></li></ul><p>This method converts a <code>Map&lt;String, Object&gt;</code> to an instance object of the target type.</p>',12),s=[n];function a(i,l){return t(),o("div",null,s)}const g=e(r,[["render",a],["__file","converter-api.html.vue"]]);export{g as default};
