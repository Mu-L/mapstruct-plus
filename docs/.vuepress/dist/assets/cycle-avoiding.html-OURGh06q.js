import{_ as n,o as s,c as a,e}from"./app-K9DHLV5l.js";const t={},p=e(`<h2 id="背景" tabindex="-1">背景</h2><p>类循环嵌套是指两个类互相引用，例如，源对象和目标对象结构都包含父对象和子对象之间的双向关联。 当存在这种情况时，直接进行转换时，会导致栈溢出的问题（stack overflow error）。</p><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">TreeNode</span> parent<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> children<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNodeDto</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">TreeNodeDto</span> parent<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNodeDto</span><span class="token punctuation">&gt;</span></span> children<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>parent</code> 属性可以是其他类型的，可能跨越一个更长的属性链形成的嵌套循环。</p><p>为了适配这种情况，MapStructPlus 的 <strong><code>AutoMapper</code></strong> 注解中增加了 <strong><code>cycleAvoiding</code></strong> 属性，该属性用于标识，是否需要避免循环嵌套的问题。 默认为 <code>false</code>，如果需要避免循环嵌套，需要将该属性设置为 <code>true</code>。</p><p>当配置为 <code>true</code> 时，在整个对象的转换过程链路中，会传递一个 <code>CycleAvoidingMappingContext</code> 对象，临时保存转换生成的对象， 在转换链路中，如果发现需要生成的对象已经存在，会直接返回该类型，从而避免栈溢出问题。 所以，配置该属性为 <code>true</code> 时，会有一点的性能消耗，如果没有循环嵌套的情况，使用默认配置即可，避免不必要的性能消耗。</p><h2 id="使用示例" tabindex="-1">使用示例</h2><p>以上面的示例为例，在 <code>AutoMapper</code> 注解中，配置 <code>cycleAvoiding</code> 属性为 <code>true</code>，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">TreeNodeDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> cycleAvoiding <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">TreeNode</span> parent<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> children<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">TreeNode</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> cycleAvoiding <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNodeDto</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">TreeNodeDto</span> parent<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNodeDto</span><span class="token punctuation">&gt;</span></span> children<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编译生成的转换逻辑如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">TreeNodeDto</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> arg0<span class="token punctuation">,</span> <span class="token class-name">CycleAvoidingMappingContext</span> arg1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TreeNodeDto</span> target <span class="token operator">=</span> arg1<span class="token punctuation">.</span><span class="token function">getMappedInstance</span><span class="token punctuation">(</span>arg0<span class="token punctuation">,</span> <span class="token class-name">TreeNodeDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>arg0 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">TreeNodeDto</span> treeNodeDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNodeDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    arg1<span class="token punctuation">.</span><span class="token function">storeMappedInstance</span><span class="token punctuation">(</span>arg0<span class="token punctuation">,</span> treeNodeDto<span class="token punctuation">)</span><span class="token punctuation">;</span>

    treeNodeDto<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>demoConvertMapperAdapterForCycleAvoiding<span class="token punctuation">.</span><span class="token function">iglm_TreeNodeToTreeNodeDto</span><span class="token punctuation">(</span>arg0<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arg1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeDto<span class="token punctuation">.</span><span class="token function">setChildren</span><span class="token punctuation">(</span>
        demoConvertMapperAdapterForCycleAvoiding<span class="token punctuation">.</span><span class="token function">iglm_TreeNodeToTreeNodeDto</span><span class="token punctuation">(</span>arg0<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arg1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> treeNodeDto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","cycle-avoiding.html.vue"]]);export{d as default};
