import{_ as n,o as s,c as a,e}from"./app-K9DHLV5l.js";const t={},o=e(`<h2 id="background" tabindex="-1">Background</h2><p>Class loop nesting is when two classes reference each other. For example, both the source and target object structures contain bidirectional associations between parent and child objects. When this occurs, direct conversion results in a stack overflow error.</p><p>Exampleï¼š</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">TreeNode</span> parent<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> children<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNodeDto</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">TreeNodeDto</span> parent<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNodeDto</span><span class="token punctuation">&gt;</span></span> children<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>parent</code> attribute can be of other types, possibly spanning a nested loop formed by a longer chain of attributes.</p><p>To accommodate this situation, the <strong><code>AutoMapper</code></strong> annotation for MapStructPlus adds the <strong><code>cycleAvoiding</code></strong> attribute, which is used for identification and whether loop nesting needs to be avoided. The default is <code>false</code>, which needs to be set to <code>true</code> if loop nesting is to be avoided.</p><p>When configured to <code>true</code>, a <code>CycleAvoidingMappingContext</code> object is passed through the conversion link of the entire object, temporarily saving the conversion generated object, this type is returned directly to avoid stack overflow problems. So, when you configure this property to <code>true</code>, there is a bit of performance cost, and if there is no loop nesting, use the default configuration to avoid unnecessary performance cost.</p><h2 id="example" tabindex="-1">Example</h2><p>Using the example above, in the <code>AutoMapper</code> annotation, configure the <code>cycleAvoiding</code> property to be <code>true</code>, as follows:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">TreeNodeDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> cycleAvoiding <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">TreeNode</span> parent<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">&gt;</span></span> children<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">TreeNode</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> cycleAvoiding <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeNodeDto</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">TreeNodeDto</span> parent<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNodeDto</span><span class="token punctuation">&gt;</span></span> children<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The compile-generated transformation logic is as follows:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">TreeNodeDto</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> arg0<span class="token punctuation">,</span> <span class="token class-name">CycleAvoidingMappingContext</span> arg1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TreeNodeDto</span> target <span class="token operator">=</span> arg1<span class="token punctuation">.</span><span class="token function">getMappedInstance</span><span class="token punctuation">(</span>arg0<span class="token punctuation">,</span> <span class="token class-name">TreeNodeDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>arg0 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">TreeNodeDto</span> treeNodeDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNodeDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    arg1<span class="token punctuation">.</span><span class="token function">storeMappedInstance</span><span class="token punctuation">(</span>arg0<span class="token punctuation">,</span> treeNodeDto<span class="token punctuation">)</span><span class="token punctuation">;</span>

    treeNodeDto<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>demoConvertMapperAdapterForCycleAvoiding<span class="token punctuation">.</span><span class="token function">iglm_TreeNodeToTreeNodeDto</span><span class="token punctuation">(</span>arg0<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arg1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    treeNodeDto<span class="token punctuation">.</span><span class="token function">setChildren</span><span class="token punctuation">(</span>
        demoConvertMapperAdapterForCycleAvoiding<span class="token punctuation">.</span><span class="token function">iglm_TreeNodeToTreeNodeDto</span><span class="token punctuation">(</span>arg0<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arg1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> treeNodeDto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),p=[o];function c(i,l){return s(),a("div",null,p)}const r=n(t,[["render",c],["__file","cycle-avoiding.html.vue"]]);export{r as default};
