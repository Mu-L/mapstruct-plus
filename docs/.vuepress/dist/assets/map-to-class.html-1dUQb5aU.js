import{_ as i,r as e,o as u,c as d,a as n,b as s,d as a,w as t,e as p}from"./app-IugRom_o.js";const k={},r=p('<p>MapStructPlus 提供了更加强大的 <code>Map&lt;String, Object&gt;</code> 转对象的功能。</p><h2 id="使用" tabindex="-1">使用</h2><p><strong>当想要自动生成 <code>Map&lt;String, Object&gt;</code> 转为目标类的接口及实现类时，只需要在目标类上添加 <code>@AutoMapMapper</code> 注解</strong>。</p><h2 id="支持的-value-类型" tabindex="-1">支持的 value 类型</h2><ul><li><code>String</code></li><li><code>BigDecimal</code></li><li><code>BigInteger</code></li><li><code>Integer</code></li><li><code>Long</code></li><li><code>Double</code></li><li><code>Boolean</code></li><li><code>Date</code></li><li><code>LocalDateTime</code></li><li><code>LocalDate</code></li><li><code>LocalTime</code></li><li><code>URI</code></li><li><code>URL</code></li><li><code>Calendar</code></li><li><code>Currency</code></li><li><code>自定义类（自定义类也需要增加 @AutoMapMapper 注解）</code></li></ul><h2 id="转换逻辑" tabindex="-1">转换逻辑</h2>',6),m=n("code",null,"Map",-1),v={href:"https://hutool.cn/docs/#/core/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7%E7%B1%BB-Convert",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,[n("strong",null,[s("且同时支持内部嵌套 "),n("code",null,"Map<String, Object>"),s(" 属性转为内部嵌套的自定义类型属性")]),s("。")],-1),M=n("h2",{id:"示例",tabindex:"-1"},"示例",-1),g=n("ul",null,[n("li",null,[s("定义两个对象："),n("code",null,"MapModelA"),s(" 和 "),n("code",null,"MapModelB")])],-1),_=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@AutoMapMapper"),s(`
`),n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MapModelA"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" str"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"int"),s(" i1"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"Long"),s(" l2"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"MapModelB"),s(" mapModelB"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@AutoMapMapper"),s(`
`),n("span",{class:"token annotation punctuation"},"@Data"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MapModelB"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"Date"),s(" date"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),h=p(`<ul><li>转换测试</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickStartTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Converter</span> converter<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> mapModel1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mapModel1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;str&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1jkf1ijkj3f&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mapModel1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;i1&quot;</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mapModel1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;l2&quot;</span><span class="token punctuation">,</span> <span class="token number">11231</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> mapModel2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mapModel2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;date&quot;</span><span class="token punctuation">,</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;2023-02-23 01:03:23&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        mapModel1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;mapModelB&quot;</span><span class="token punctuation">,</span> mapModel2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> <span class="token class-name">MapModelA</span> mapModelA <span class="token operator">=</span> converter<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>mapModel1<span class="token punctuation">,</span> <span class="token class-name">MapModelA</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapModelA<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// MapModelA(str=1jkf1ijkj3f, i1=111, l2=11231, mapModelB=MapModelB(date=2023-02-23 01:03:23))</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function f(w,y){const c=e("ExternalLinkIcon"),o=e("CodeGroupItem"),l=e("CodeGroup");return u(),d("div",null,[r,n("p",null,[n("strong",null,[s("针对目标类中的一个属性，首先会判断 "),m,s(" 中是否存在该键，如果存在的话，首先判断类型，如果相同类型，直接强转，如果不同类型，则会基于 "),n("a",v,[s("Hutool"),a(c)]),s(" 提供的类型转换工具尝试转换为目标类型")]),s("。")]),b,M,g,a(l,null,{default:t(()=>[a(o,{title:"MapModelA"},{default:t(()=>[_]),_:1}),a(o,{title:"MapModelB"},{default:t(()=>[B]),_:1})]),_:1}),h])}const A=i(k,[["render",f],["__file","map-to-class.html.vue"]]);export{A as default};
