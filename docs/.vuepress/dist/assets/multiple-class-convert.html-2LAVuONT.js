import{_ as t,o as e,c as o,e as a,a as n,b as s}from"./app-TsO7MrGw.js";const p={},c=a(`<p>MapStructPlus supports conversion of a single class to multiple target types as well as a single class to a single target type.</p><h2 id="configure-multiplee-class-conversions" tabindex="-1">Configure multiplee class conversions</h2><p>When you want to configure a class to convert to multiple classes, you can do so through <code>@AutoMappers</code>, which supports configure multiple <code>@AutoMapper</code></p><p>eg：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AutoMappers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">UserDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">UserVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token comment">// fields</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="configures-the-rules-for-the-specified-class-transformation" tabindex="-1">Configures the rules for the specified class transformation</h2><p>When configuring multiple class conversions, the same property has different conversion rules for different classes.</p><p>To solve this problem, you can first specify multiple transformation rules using <code>@AutoMappings</code> and, when using the <code>@AutoMapping</code> annotation, configure the <code>targetClass</code> attribute to specify the application target transformation class for the current rule.</p><p>If <code>targetClass</code> is not specified when the <code>@AutoMapping</code> annotation is configured, the current rule applies to all class conversions.</p>`,9),l=n("div",{class:"custom-container info"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"INFO"),n("p",null,[n("code",null,"targetClass"),s(" also supports the configuration parent class, which applies to this rule when the target class is a subclass of the configured "),n("code",null,"targetClass"),s(".")]),n("blockquote",null,[n("p",null,"This feature is supported from 1.3.6")])],-1),i=a(`<p>eg：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AutoMappers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">UserDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">UserVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> young<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>targetClass <span class="token operator">=</span> <span class="token class-name">UserDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;educations&quot;</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">&quot;java(java.lang.String.join(\\&quot;,\\&quot;, source.getEducationList()))&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> educationList<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AutoMappings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>targetClass <span class="token operator">=</span> <span class="token class-name">UserDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>targetClass <span class="token operator">=</span> <span class="token class-name">UserVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ignore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>targetClass <span class="token operator">=</span> <span class="token class-name">UserDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> numberFormat <span class="token operator">=</span> <span class="token string">&quot;$0.00&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> assets<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>numberFormat <span class="token operator">=</span> <span class="token string">&quot;$0.00&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> money<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AutoMappings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>targetClass <span class="token operator">=</span> <span class="token class-name">UserVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;voField&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> voField<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),u=[c,l,i];function r(d,k){return e(),o("div",null,u)}const m=t(p,[["render",r],["__file","multiple-class-convert.html.vue"]]);export{m as default};
