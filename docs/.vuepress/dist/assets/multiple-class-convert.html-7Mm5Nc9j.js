import{_ as n,o as s,c as a,e as t}from"./app-R75PxRwX.js";const p={},e=t(`<p>MapStructPlus 除了支持一个类与单个目标类型进行转换，还支持一个类与多个目标类型进行转换。</p><h2 id="配置多个类转换" tabindex="-1">配置多个类转换</h2><p>当想要配置一个类与多个类进行转换时，可以通过 <code>@AutoMappers</code> 来配置，该注解支持配置多个 <code>@AutoMapper</code></p><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AutoMappers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">UserDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">UserVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token comment">// fields</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置指定类转换的规则" tabindex="-1">配置指定类转换的规则</h2><p>当配置多个类转换时，同一属性针对不同的类有不一样的转换规则。</p><p>针对这个问题，首先可以使用 <code>@AutoMappings</code> 指定多个转换规则，并且在使用 <code>@AutoMapping</code> 注解时，配置 <code>targetClass</code> 属性，指定当前规则的应用目标转换类。</p><p>如果在配置 <code>@AutoMapping</code> 注解时，没有指定 <code>targetClass</code> 时，则当前规则，会应用于与所有类转换。</p><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AutoMappers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">UserDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token annotation punctuation">@AutoMapper</span><span class="token punctuation">(</span>target <span class="token operator">=</span> <span class="token class-name">UserVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> young<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>targetClass <span class="token operator">=</span> <span class="token class-name">UserDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;educations&quot;</span><span class="token punctuation">,</span> expression <span class="token operator">=</span> <span class="token string">&quot;java(java.lang.String.join(\\&quot;,\\&quot;, source.getEducationList()))&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> educationList<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AutoMappings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>targetClass <span class="token operator">=</span> <span class="token class-name">UserDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> dateFormat <span class="token operator">=</span> <span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>targetClass <span class="token operator">=</span> <span class="token class-name">UserVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ignore <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> birthday<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>targetClass <span class="token operator">=</span> <span class="token class-name">UserDto</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> numberFormat <span class="token operator">=</span> <span class="token string">&quot;$0.00&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> assets<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>numberFormat <span class="token operator">=</span> <span class="token string">&quot;$0.00&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> money<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AutoMappings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@AutoMapping</span><span class="token punctuation">(</span>targetClass <span class="token operator">=</span> <span class="token class-name">UserVO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;voField&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> voField<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","multiple-class-convert.html.vue"]]);export{r as default};
